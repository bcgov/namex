{
	"info": {
		"_postman_id": "36ffe902-3746-4bdd-9fe9-c1cffd86779a",
		"name": "colin-pipeline-dev",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "setup",
			"description": null,
			"item": [
				{
					"name": "Install Postman BDD",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// If the \"postman_bdd_path\" environment variable is set, then we'll use it.",
									"// Otherwise, we'll default to the published version",
									"if (!environment.postman_bdd_path) {",
									"    postman.setGlobalVariable('postman_bdd_path', 'http://bigstickcarpet.com/postman-bdd/dist/postman-bdd.min.js');",
									"}",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// \"install\" Postman BDD",
									"postman.setGlobalVariable('postmanBDD', responseBody);",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-cache"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{postman_bdd_path}}",
							"host": [
								"{{postman_bdd_path}}"
							]
						},
						"description": "This request downloads [Postman BDD](https://github.com/BigstickCarpet/postman-bdd) and then \"installs\" it by setting a global variable\n"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2b5cb058-1cd3-467a-9032-e943bbee50a9",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2c5955ab-9722-4fed-b70c-259c9afefe1c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "authenticate",
			"description": null,
			"item": [
				{
					"name": "authenticate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c6720c75-f388-4f9a-a157-c4b4b560a99f",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"token\", jsonData.access_token);",
									"pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
									"",
									"pm.environment.set(\"token_expires\", Date.now()+(jsonData.expires_in * 1000));",
									"pm.environment.set(\"refresh_token_expires\", Date.now()+(jsonData.refresh_expires_in * 1000));",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "grant_type=password&client_id={{clientid}}&username={{userid}}&password=WhatEver1&client_secret={{client_secret}}"
						},
						"url": {
							"raw": "{{authurl}}/auth/realms/{{realm}}/protocol/openid-connect/token?Content-Type=application/x-www-form-urlencoded",
							"host": [
								"{{authurl}}"
							],
							"path": [
								"auth",
								"realms",
								"{{realm}}",
								"protocol",
								"openid-connect",
								"token"
							],
							"query": [
								{
									"key": "Content-Type",
									"value": "application/x-www-form-urlencoded"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ops",
			"description": null,
			"item": [
				{
					"name": "readyz",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "89b427ca-7454-4a47-ba01-3646a5edd8a2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"api is healthy\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql('api is ready');",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c0018fc8-480f-449e-957d-6cba47163ea5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/readyz",
							"host": [
								"{{url}}"
							],
							"path": [
								"readyz"
							]
						}
					},
					"response": []
				},
				{
					"name": "healthz",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b6e5816f-983d-45c5-86a5-9ac59cda50c1",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"api is healthy\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql('api is healthy');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/healthz",
							"host": [
								"{{url}}"
							],
							"path": [
								"healthz"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "corpDetails",
			"description": "",
			"item": [
				{
					"name": "corporations/A0003650 -xpro",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dfcec318-950a-43e5-8b6c-2e6a90af8e81",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d5ba0437-d303-4298-91bc-708cb833eb0a",
								"type": "text/javascript",
								"exec": [
									"eval(globals.postmanBDD);",
									"var jsonData = pm.response.json();",
									"    ",
									"tests[\"Response time is acceptable\"] = responseTime < 8000;",
									"",
									"it('Should be a success response', () => {",
									"    response.ok.should.be.true;            // 2XX",
									"    response.error.should.be.false;          // 4XX or 5XX",
									"    response.clientError.should.be.false;    // 4XX",
									"    response.serverError.should.be.false;   // 5XX",
									"    response.should.have.status(200);",
									"    response.statusType.should.equal(2);",
									"});",
									"",
									"it('Should return JSON', () => {",
									"    response.should.be.json;",
									"    response.should.have.header('Content-Type', 'application/json');",
									"    response.type.should.equal('application/json');",
									"});",
									"",
									"it('Should contain the parsed JSON keys', () => {",
									"    response.body.should.have.property('jurisdiction');",
									"    if (jsonData.jurisdiction == 'BC') {",
									"        response.body.should.be.an('object').with.keys(['directors','incorp #','incorporated','jurisdiction','nature of business','registered office delivery address','records office delivery address']);",
									"    } else {",
									"        response.body.should.be.an('object').with.keys(['directors','incorp #','incorporated','jurisdiction','nature of business','head office','attorney names']);",
									"    }",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}/A0003650",
							"host": [
								"{{url}}"
							],
							"path": [
								"A0003650"
							]
						}
					},
					"response": []
				},
				{
					"name": "corporations/0022258 -bc",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e61a9c11-9643-4ec8-9636-84294af73412",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d5ba0437-d303-4298-91bc-708cb833eb0a",
								"type": "text/javascript",
								"exec": [
									"eval(globals.postmanBDD);",
									"var jsonData = pm.response.json();",
									"    ",
									"tests[\"Response time is acceptable\"] = responseTime < 8000;",
									"",
									"it('Should be a success response', () => {",
									"    response.ok.should.be.true;            // 2XX",
									"    response.error.should.be.false;          // 4XX or 5XX",
									"    response.clientError.should.be.false;    // 4XX",
									"    response.serverError.should.be.false;   // 5XX",
									"    response.should.have.status(200);",
									"    response.statusType.should.equal(2);",
									"});",
									"",
									"it('Should return JSON', () => {",
									"    response.should.be.json;",
									"    response.should.have.header('Content-Type', 'application/json');",
									"    response.type.should.equal('application/json');",
									"});",
									"",
									"it('Should contain the parsed JSON keys', () => {",
									"    response.body.should.have.property('jurisdiction');",
									"    if (jsonData.jurisdiction == 'BC') {",
									"        response.body.should.be.an('object').with.keys(['directors','incorp #','incorporated','jurisdiction','nature of business','registered office delivery address','records office delivery address']);",
									"    } else {",
									"        response.body.should.be.an('object').with.keys(['directors','incorp #','incorporated','jurisdiction','nature of business','head office','attorney names']);",
									"    }",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{url}}/0022258",
							"host": [
								"{{url}}"
							],
							"path": [
								"0022258"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}