#!/usr/bin/env groovy
// Implementation Details
// The solr build depends on the solr-base build (more precisely the solr-base image stream)
// which only needs to be rebuilt when there are changes to it's associated repository (https://github.com/bcgov/openshift-solr)
// Therefore, it is unnecessary to build it as part of this pipeline.

// VB - This file is a hacked hybrid between the TheOrgBook Jenkins template and Angelika's new 3.9 Jenkins template.

// define constants
def BUILDCFG_NAME ='solr'
def IMAGE_NAME = 'solr'

def DEV_DEPLOYMENT_NAME = 'solr'
def DEV_TAG_NAME = 'dev'
def DEV_NS = 'servicebc-ne-dev'

def TST_DEPLOYMENT_NAME = 'solr'
def TST_TAG_NAME = 'test'
def TST_BCK_TAG_NAME = 'test-previous'
def TST_NS = 'servicebc-ne-test'

def PROD_DEPLOYMENT_NAME = 'solr'
def PROD_TAG_NAME = 'prod'
def PROD_BCK_TAG_NAME = 'prod-previous'
def PROD_NS = 'servicebc-ne-prod'


// Edit your app's name below
def APP_NAME = 'solr'

// Edit your application's context directory here
def CONTEXT_DIRECTORY = 'solr'

// You shouldn't have to edit these if you're following the conventions
def BUILD_CONFIG = APP_NAME
def IMAGESTREAM_NAME = APP_NAME

// send a msg to slack channel
import groovy.json.JsonOutput
def notifySlack(text, channel, url, attachments) {
    def slackURL = url
    def jenkinsIcon = 'https://wiki.jenkins-ci.org/download/attachments/2916393/logo.png'
    def payload = JsonOutput.toJson([text: text,
        channel: channel,
        username: "Jenkins",
        icon_url: jenkinsIcon,
        attachments: attachments
    ])
    def encodedReq = URLEncoder.encode(payload, "UTF-8")
    sh("curl -s -S -X POST " +
            "--data \'payload=${encodedReq}\' ${slackURL}")
}

// Determine whether there were any changes the files within the project's context directory.
// returns a string containing info on the commits that changed this api -- empty if no changes were made
@NonCPS
String triggerBuild(String contextDirectory) {
    def changeLogSets = currentBuild.changeSets
    def filesChangeCnt = 0
    MAX_MSG_LEN = 512
    def changeString = ""
    for (int i = 0; i < changeLogSets.size(); i++) {
        def entries = changeLogSets[i].items
        for (int j = 0; j < entries.length; j++) {
            def entry = entries[j]
            //echo "${entry.commitId} by ${entry.author} on ${new Date(entry.timestamp)}: ${entry.msg}"
            def files = new ArrayList(entry.affectedFiles)
            for (int k = 0; k < files.size(); k++) {
                def file = files[k]
                def filePath = file.path
                //echo ">> ${file.path}"
                if (filePath.contains(contextDirectory)) {
                    filesChangeCnt = 1
                    truncated_msg = entry.msg.take(MAX_MSG_LEN)
                    changeString += " - ${truncated_msg} [${entry.author}]\n"
                    k = files.size()
                    j = entries.length
                }
            }
        }
    }
    if ( filesChangeCnt < 1 ) {
        echo('The changes do not require a build.')
        return ""
    } else {
        echo('The changes require a build.')
        return changeString
    }
}

def run_pipeline = true
if( triggerBuild(CONTEXT_DIRECTORY) == "" ) {
    node {
        SLACK_TOKEN = sh (
                    script: """oc get secret/slack -o template --template="{{.data.token}}" | base64 --decode""",
                        returnStdout: true).trim()

        // send msg to slack
        def attachment = [:]
        attachment.fallback = "See build log for more details"
        attachment.title = "SOLR Build ${BUILD_ID} has no changes"
        attachment.color = "#00FF00" // Lime Green
        attachment.text = "Proceed anyways?" //+ "\nCommit ${GIT_COMMIT_SHORT_HASH} by ${GIT_COMMIT_AUTHOR}"
        def decision = [:]
        decision.type = "button"
        decision.text = "Proceed/Abort?"
        decision.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-solr-pipeline/${BUILD_ID}/input"
        decision.short = false
        attachment.actions = [decision]
        notifySlack("solr-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
    }
    try {
        timeout(time: 1, unit: 'DAYS') {
            input message: "Run solr-pipeline?", id: "1234", submitter: 'admin,ljtrent-admin,thorwolpert-admin,rarmitag-admin,kialj876-edit,katiemcgoff-admin,waltermoar-admin'
        }
    } catch (Exception e) {
        run_pipeline = false;
    }
}

if (!run_pipeline) {
    // The changeSets did not contain any changes within the project's context directory.
    // Clearly indicate there were no changes.
    stage('No Changes') {
        node {
            SLACK_TOKEN = sh (
                    script: """oc get secret/slack -o template --template="{{.data.token}}" | base64 --decode""",
                        returnStdout: true).trim()

            // send msg to slack
            def attachment = [:]
            attachment.fallback = "See build log for more details"
            attachment.title = "SOLR-API Build {$BUILD_ID} prevented because there were no changes"
            attachment.color = "#00FF00" // Lime Green
            attachment.text = "No changes applied to solr" //+ "\nCommit ${GIT_COMMIT_SHORT_HASH} by ${GIT_COMMIT_AUTHOR}"
            notifySlack("solr-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])

            currentBuild.result = 'SUCCESS'
        }//end node
    }//endstage
} else {
    node {
        SLACK_TOKEN = sh (
                    script: """oc get secret/slack -o template --template="{{.data.token}}" | base64 --decode""",
                        returnStdout: true).trim()

        // send msg to slack
        def attachment = [:]
        attachment.fallback = "See build log for more details"
        attachment.title = "SOLR pipeline executing..."
        attachment.color = "#00FF00" // Lime Green
        notifySlack("solr-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])

        //Part 1 - checkout, build, dev deploy

        stage('Checkout') {
            try {
                echo "checking out source"
                echo "Build: ${BUILD_ID}"
                checkout scm

            } catch (Exception e) {
                echo "error during checkout: ${e}"
                // send msg to slack
                attachment = [:]
                attachment.fallback = "See build log for more details"
                attachment.title = "SOLR failed to CHECKOUT :fire:"
                attachment.color = "danger" // red
                attachment.text = "Build ${BUILD_ID}"
                def logs = [:]
                logs.type = "button"
                logs.text = "Build Log"
                logs.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-solr-pipeline/${BUILD_ID}/console"
                logs.short = false
                attachment.actions = [logs]
                notifySlack("solr-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
                error('Aborted')
            }
        }//end stage

        // Perform a build
        stage('Build') {

            try {
                echo "Building: " + BUILD_CONFIG
                openshiftBuild bldCfg: BUILD_CONFIG, showBuildLogs: 'true'

                // Don't tag with BUILD_ID so the pruner can do it's job; it won't delete tagged images.
                // Tag the images for deployment based on the image's hash
                IMAGE_HASH = sh (
                    script: """oc get istag ${IMAGESTREAM_NAME}:latest -o template --template=\"{{.image.dockerImageReference}}\"|awk -F \":\" \'{print \$3}\'""",
                        returnStdout: true).trim()
                echo ">> IMAGE_HASH: ${IMAGE_HASH}"
                echo ">>>> Build Complete"

            } catch (Exception e) {
                echo "error during build: ${e}"
                // send msg to slack
                attachment = [:]
                attachment.fallback = "See build log for more details"
                attachment.title = "SOLR failed to BUILD :fire:"
                attachment.color = "danger" // red
                attachment.text = "Build ${BUILD_ID}"
                def logs = [:]
                logs.type = "button"
                logs.text = "Build Log"
                logs.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-solr-pipeline/${BUILD_ID}/console"
                logs.short = false
                attachment.actions = [logs]
                notifySlack("solr-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
                error('Aborted')
            }

            // send msg to slack
            attachment = [:]
            attachment.fallback = "See build log for more details"
            attachment.title = "SOLR Build ${BUILD_ID} OK! :heart: :tada:"
            attachment.color = "#00FF00" // Lime Green
            attachment.text = "Changes applied:\n" + triggerBuild(CONTEXT_DIRECTORY) //+ "\nCommit ${GIT_COMMIT_SHORT_HASH} by ${GIT_COMMIT_AUTHOR}"
            def details = [:]
            details.type = "button"
            details.text = "Details"
            details.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-solr-pipeline/${BUILD_ID}"
            details.short = false
            attachment.actions = [details]
            notifySlack("solr-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
        }//end stage

        stage('Deploy DEV') {
            try {
                echo ">>> Tag ${IMAGE_HASH} with dev"
                openshiftTag destStream: IMAGESTREAM_NAME, verbose: 'true', destTag: DEV_TAG_NAME, srcStream: IMAGESTREAM_NAME, srcTag: "${IMAGE_HASH}"

                sleep 10

                openshiftVerifyDeployment depCfg: DEV_DEPLOYMENT_NAME, namespace: DEV_NS, replicaCount: 1, verbose: 'false', verifyReplicaCount: 'false'
                echo ">>>> Deployment Complete"

            } catch (Exception e) {
                echo "error during deploy: ${e}"
                // send msg to slack
                attachment = [:]
                attachment.fallback = "See build log for more details"
                attachment.title = "SOLR failed to DEPLOY to DEV :fire:"
                attachment.color = "danger" // red
                def logs = [:]
                logs.type = "button"
                logs.text = "Build Log"
                logs.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-solr-pipeline/${BUILD_ID}/console"
                logs.short = false
                attachment.actions = [logs]
                notifySlack("solr-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
                error('Aborted')
            }

            // send msg to slack
            attachment = [:]
            attachment.fallback = "See build log for more details"
            attachment.title = "SOLR successfully deployed to DEV :rocket:"
            attachment.color = "#00FF00" // Lime Green
            notifySlack("solr-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
        }//end stage
    }//end node

    // Part 2 - Integration Testing app

    //insert tests here

    // Part 3 - Security scan of deployed app in dev

    // ensure pod labels/names are unique
    def zappodlabel1 = "myapp-zap-${UUID.randomUUID().toString()}"
    podTemplate(label: zappodlabel1, name: zappodlabel1, serviceAccount: 'jenkins', cloud: 'openshift', containers: [
        containerTemplate(
            name: 'jnlp',
            image: '172.50.0.2:5000/openshift/jenkins-slave-zap',
            resourceRequestCpu: '500m',
            resourceLimitCpu: '1000m',
            resourceRequestMemory: '3Gi',
            resourceLimitMemory: '4Gi',
            workingDir: '/home/jenkins',
            command: '',
            args: '${computer.jnlpmac} ${computer.name}'
        )
    ])
    {
        stage('ZAP Security Scan DEV') {
            node(zappodlabel1) {

                sleep 60

                try {
                    def retVal = sh returnStatus: true, script: '/zap/zap-baseline.py -r baseline.html -t https://solr-dev.pathfinder.gov.bc.ca'
                    // publishHTML([allowMissing: false`, alwaysLinkToLastBuild: false, keepAll: true, reportDir: '/zap/wrk', reportFiles: 'baseline.html', reportName: 'ZAP Baseline Scan', reportTitles: 'ZAP Baseline Scan'])
                    echo "Return value is: ${retVal}"

                } catch (Exception e) {
                    echo "error during dev zap scan: ${e}"
                    // send msg to slack
                    def attachment = [:]
                    attachment.fallback = "See build log for more details"
                    attachment.title = "SOLR-DEV failed ZAP-SCAN :x:"
                    attachment.color = "danger" // red
                    def logs = [:]
                    logs.type = "button"
                    logs.text = "Build Log"
                    logs.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-solr-pipeline/${BUILD_ID}/console"
                    logs.short = false
                    attachment.actions = [logs]
                    notifySlack("coln-api-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
                }

                // send msg to slack
                def attachment = [:]
                attachment.fallback = "See build log for more details"
                attachment.title = "SOLR-DEV passed ZAP-SCAN :white_check_mark:"
                attachment.color = "#00FF00" // Lime Green
                notifySlack("solr-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
            }
        }
    }

    //Part 4 - test deploy

    stage('Deploy TEST') {

        node {
            SLACK_TOKEN = sh (
                script: """oc get secret/slack -o template --template="{{.data.token}}" | base64 --decode""",
                    returnStdout: true).trim()

            // send msg to slack
            def attachment = [:]
            attachment.title = "SOLR ready for DEPLOY to TEST"
            attachment.color = "#ffff00" // yellow
            def decision = [:]
            decision.type = "button"
            decision.text = "Proceed/Abort?"
            decision.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-solr-pipeline/${BUILD_ID}/input"
            decision.short = false
            attachment.actions = [decision]
            notifySlack("solr-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
        }

        def abort = false
        try {
            timeout(time: 1, unit: 'DAYS') {
                input message: "Deploy to test?", submitter: 'admin,ljtrent-admin,thorwolpert-admin,rarmitag-admin,kialj876-edit,katiemcgoff-admin,waltermoar-admin'
            }
        } catch (Exception e) {
            abort = true
        }
        node {
            SLACK_TOKEN = sh (
                script: """oc get secret/slack -o template --template="{{.data.token}}" | base64 --decode""",
                    returnStdout: true).trim()

            if (abort) {
                // send msg to slack
                def attachment = [:]
                attachment.fallback = "See build log for more details"
                attachment.title = "SOLR-TEST ABORTED :boom:"
                attachment.color = "danger" // red
                notifySlack("solr-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])

                echo ">>>> Deployment Aborted"
                error('Aborted')
            } else {
                try {
                    echo ">>> Tag ${TST_TAG_NAME} with ${TST_BCK_TAG_NAME}"
                    openshiftTag destStream: IMAGE_NAME, verbose: 'false', destTag: TST_BCK_TAG_NAME, srcStream: IMAGE_NAME, srcTag: TST_TAG_NAME
                    echo ">>> Tag ${IMAGE_HASH} with ${TST_TAG_NAME}"
                    openshiftTag destStream: IMAGE_NAME, verbose: 'false', destTag: TST_TAG_NAME, srcStream: IMAGE_NAME, srcTag: "${IMAGE_HASH}"

                    sleep 5

                    openshiftVerifyDeployment depCfg: TST_DEPLOYMENT_NAME, namespace: TST_NS, replicaCount: 1, verbose: 'false', verifyReplicaCount: 'false'
                    echo ">>>> Deployment Complete"

                } catch (Exception e) {
                    echo "error during test deploy: ${e}"
                    // send msg to slack
                    attachment = [:]
                    attachment.fallback = "See build log for more details"
                    attachment.title = "SOLR failed to DEPLOY to TEST :fire:"
                    attachment.color = "danger" // red
                    def logs = [:]
                    logs.type = "button"
                    logs.text = "Build Log"
                    logs.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-solr-pipeline/${BUILD_ID}/console"
                    logs.short = false
                    attachment.actions = [logs]
                    notifySlack("solr-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
                    error('Aborted')
                }
                // send msg to slack
                attachment = [:]
                attachment.fallback = "See build log for more details"
                attachment.title = "SOLR successfully depoyed to TEST :rocket::rocket:"
                attachment.color = "#00FF00" // Lime Green
                notifySlack("solr-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
            }
        }
    }

    // Part 5 - Integration Testing app on test

    //insert tests here

    // Part 6 - Security scan of deployed app in test

    //node/pod needs environment setup for zap scan
    def zappodlabel2 = "myapp-zap-${UUID.randomUUID().toString()}"
    podTemplate(label: zappodlabel2, name: zappodlabel2, serviceAccount: 'jenkins', cloud: 'openshift', containers: [
        containerTemplate(
            name: 'jnlp',
            image: '172.50.0.2:5000/openshift/jenkins-slave-zap',
            resourceRequestCpu: '500m',
            resourceLimitCpu: '1000m',
            resourceRequestMemory: '3Gi',
            resourceLimitMemory: '4Gi',
            workingDir: '/home/jenkins',
            command: '',
            args: '${computer.jnlpmac} ${computer.name}'
        )
    ])
    {
        node(zappodlabel2) {
            stage('ZAP Security Scan TEST') {

                sleep 60

                try {
                    def retVal = sh returnStatus: true, script: '/zap/zap-baseline.py -r baseline.html -t https://solr-test.pathfinder.gov.bc.ca'
                    // publishHTML([allowMissing: false`, alwaysLinkToLastBuild: false, keepAll: true, reportDir: '/zap/wrk', reportFiles: 'baseline.html', reportName: 'ZAP Baseline Scan', reportTitles: 'ZAP Baseline Scan'])
                    echo "Return value is: ${retVal}"

                } catch (Exception e) {
                    echo "error during test zap scan: ${e}"
                    // send msg to slack
                    attachment = [:]
                    attachment.fallback = "See build log for more details"
                    attachment.title = "SOLR-TEST failed ZAP-SCAN :x: :x:"
                    attachment.color = "danger" // red
                    def logs = [:]
                    logs.type = "button"
                    logs.text = "Build Log"
                    logs.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-solr-pipeline/${BUILD_ID}/console"
                    logs.short = false
                    attachment.actions = [logs]
                    notifySlack("solr-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
                }
                // send msg to slack
                def attachment = [:]
                attachment.fallback = "See build log for more details"
                attachment.title = "SOLR passed TEST ZAP SCAN :white_check_mark: :white_check_mark:"
                attachment.color = "#00FF00" // Lime Green
                notifySlack("solr-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
            }//end stage
        }//end node
    }//end pod template

    // Part 7 - Deploy to prod

    stage('Deploy PROD') {

        node {
            SLACK_TOKEN = sh (
                script: """oc get secret/slack -o template --template="{{.data.token}}" | base64 --decode""",
                    returnStdout: true).trim()

            // send msg to slack
            def attachment = [:]
            attachment.title = "SOLR ready for DEPLOY to PROD"
            attachment.color = "#ffff00" // yellow
            def decision = [:]
            decision.type = "button"
            decision.text = "Proceed/Abort?"
            decision.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-solr-pipeline/${BUILD_ID}/input"
            decision.short = false
            attachment.actions = [decision]
            notifySlack("solr-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
        }//end node

        def abort = false
        try {
            timeout(time: 1, unit: 'DAYS') {
                input message: "Deploy to test?", submitter: 'admin,ljtrent-admin,thorwolpert-admin,rarmitag-admin,kialj876-edit,katiemcgoff-admin,waltermoar-admin'
            }
        } catch (Exception e) {
            abort = true
        }
        node {
            if (abort) {
                // send msg to slack
                def attachment = [:]
                attachment.fallback = "See build log for more details"
                attachment.title = "SOLR-PROD ABORTED :boom::boom:"
                attachment.color = "danger" // red
                notifySlack("solr-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])

                echo ">>>> Deployment Aborted"
                error('Aborted')
            } else {
                try {
                    echo ">>> Tag ${PROD_TAG_NAME} with ${PROD_BCK_TAG_NAME}"
                    openshiftTag destStream: IMAGE_NAME, verbose: 'false', destTag: PROD_BCK_TAG_NAME, srcStream: IMAGE_NAME, srcTag: PROD_TAG_NAME
                    echo ">>> Tag ${IMAGE_HASH} with ${PROD_TAG_NAME}"
                    openshiftTag destStream: IMAGE_NAME, verbose: 'false', destTag: PROD_TAG_NAME, srcStream: IMAGE_NAME, srcTag: "${IMAGE_HASH}"

                    sleep 5

                    openshiftVerifyDeployment depCfg: PROD_DEPLOYMENT_NAME, namespace: PROD_NS, replicaCount: 1, verbose: 'false', verifyReplicaCount: 'false'
                    echo ">>>> Deployment Complete"

                } catch (Exception e) {
                    echo "error during prod deploy: ${e}"
                    // send msg to slack
                    def attachment = [:]
                    attachment.fallback = "See build log for more details"
                    attachment.title = "SOLR failed to DEPLOY to PROD :fire:"
                    attachment.color = "danger" // red
                    def logs = [:]
                    logs.type = "button"
                    logs.text = "Build Log"
                    logs.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-solr-pipeline/${BUILD_ID}/console"
                    logs.short = false
                    attachment.actions = [logs]
                    notifySlack("solr-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
                    error('Aborted')
                }

                // send msg to slack
                def attachment = [:]
                attachment.fallback = "See build log for more details"
                attachment.title = "SOLR successfully depoyed to PROD :tada::rocket::tada:"
                attachment.color = "#00FF00" // Lime Green
                notifySlack("solr-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
            }
        }//end node
    }//end stage
}