// Implementation Details
// The solr build depends on the solr-base build (more precisely the solr-base image stream)
// which only needs to be rebuilt when there are changes to it's associated repository (https://github.com/bcgov/openshift-solr)
// Therefore, it is unnecessary to build it as part of this pipeline.

// VB - This file is a hacked hybrid between the TheOrgBook Jenkins template and Angelika's new 3.9 Jenkins template.

// define constants
def BUILDCFG_NAME ='solr'
def IMAGE_NAME = 'solr'
def DEV_DEPLOYMENT_NAME = 'solr'
def DEV_TAG_NAME = 'dev'
def DEV_NS = 'servicebc-ne-dev'

def TST_DEPLOYMENT_NAME = 'solr'
def TST_TAG_NAME = 'test'
def TST_BCK_TAG_NAME = 'test-previous'
def TST_NS = 'servicebc-ne-test'

def PROD_DEPLOYMENT_NAME = 'solr'
def PROD_TAG_NAME = 'prod'
def PROD_BCK_TAG_NAME = 'prod-previous'
def PROD_NS = 'servicebc-ne-prod'


// Edit your app's name below
def APP_NAME = 'solr'

// Edit your environment TAG names below
def TAG_NAMES = ['dev', 'test', 'prod']

// Edit your application's context directory here
def CONTEXT_DIRECTORY = 'solr'

// You shouldn't have to edit these if you're following the conventions
def BUILD_CONFIG = APP_NAME
def IMAGESTREAM_NAME = APP_NAME

// Determine whether there were any changes the files within the project's context directory.
@NonCPS
boolean triggerBuild(String contextDirectory) {
  // Determine if code has changed within the source context directory.
  def changeLogSets = currentBuild.changeSets
  def filesChangeCnt = 0
  for (int i = 0; i < changeLogSets.size(); i++) {
    def entries = changeLogSets[i].items
    for (int j = 0; j < entries.length; j++) {
      def entry = entries[j]
      //echo "${entry.commitId} by ${entry.author} on ${new Date(entry.timestamp)}: ${entry.msg}"
      def files = new ArrayList(entry.affectedFiles)
      for (int k = 0; k < files.size(); k++) {
        def file = files[k]
        def filePath = file.path
        //echo ">> ${file.path}"
        if (filePath.contains(contextDirectory)) {
          filesChangeCnt = 1
          k = files.size()
          j = entries.length
        }
      }
    }
  }

  if ( filesChangeCnt < 1 ) {
    echo('The changes do not require a build.')
    return false
  }
  else {
    echo('The changes require a build.')
    return true
  }
}

node {
  if( true ) {
	// The changeSets contained changes within the project's context directory.
	// Perform a build
	stage('build ' + BUILD_CONFIG) {
      echo "Building: " + BUILD_CONFIG
      openshiftBuild bldCfg: BUILD_CONFIG, showBuildLogs: 'true'

      // Don't tag with BUILD_ID so the pruner can do it's job; it won't delete tagged images.
      // Tag the images for deployment based on the image's hash
      IMAGE_HASH = sh (
        script: """oc get istag ${IMAGESTREAM_NAME}:latest -o template --template=\"{{.image.dockerImageReference}}\"|awk -F \":\" \'{print \$3}\'""",
        returnStdout: true).trim()
      echo ">> IMAGE_HASH: ${IMAGE_HASH}"
    }

    stage('deploy-' + TAG_NAMES[0]) {
      openshiftTag destStream: IMAGESTREAM_NAME, verbose: 'true', destTag: TAG_NAMES[0], srcStream: IMAGESTREAM_NAME, srcTag: "${IMAGE_HASH}"
    }

    stage('deploy-test') {
        timeout(time: 1, unit: 'DAYS') {
	        input message: "Deploy to test?"
        }
        node('master') {
          echo ">>> Tag ${TST_TAG_NAME} with ${TST_BCK_TAG_NAME}"
          openshiftTag destStream: IMAGE_NAME, verbose: 'false', destTag: TST_BCK_TAG_NAME, srcStream: IMAGE_NAME, srcTag: TST_TAG_NAME
              echo ">>> Tag ${IMAGE_HASH} with ${TST_TAG_NAME}"
          openshiftTag destStream: IMAGE_NAME, verbose: 'false', destTag: TST_TAG_NAME, srcStream: IMAGE_NAME, srcTag: "${IMAGE_HASH}"
              sleep 5
          openshiftVerifyDeployment depCfg: TST_DEPLOYMENT_NAME, namespace: TST_NS, replicaCount: 1, verbose: 'false', verifyReplicaCount: 'false'
          echo ">>>> Deployment Complete"
          //notifySlack("Test Deploy, changes:\n" + getChangeString(), "#builds", "https://hooks.slack.com/services/${SLACK_TOKEN}", [])
        }
     }
  }
  else {
    // The changeSets did not contain any changes within the project's context directory.
	// Clearly indicate there were no changes.
    stage('No Changes') {
      currentBuild.result = 'SUCCESS'
    }
  }
}