[tool.poetry]
name = "namex-pay"
version = "0.2.1"
description = ""
authors = ["Thor Wolpert <thor@wolpert.ca>"]
license = "Apache Software License Version 2.0"
readme = "README.md"
packages = [{include = "namex_pay", from = "src"}]

[tool.poetry.dependencies]
python = ">=3.12,<3.13"
namex = { git = "https://github.com/bcgov/namex.git", subdirectory = "api" }
gcp_queue = { git = "https://github.com/bcgov/sbc-connect-common.git", subdirectory = "python/gcp-queue", branch = "main" }
registry_schemas = { git = "https://github.com/bcgov/business-schemas.git"}
swagger_client = { git = "https://github.com/bcgov/namex-synonyms-api-py-client.git" }
sbc-common-components = { git = "https://github.com/bcgov/sbc-common-components.git", subdirectory = "python" }

google-auth = "^2.27.0"
pyhumps = "3.8.0"
flask = "^3.0.2"

[tool.poetry.group.dev.dependencies]
pytest = "^8.1.1"
freezegun = "^1.4.0"
pytest-aiohttp = "^1.0.5"
pytest-mock = "^3.12.0"
pyhamcrest = "^2.1.0"
dpath = "^2.1.6"
pydocstyle = "^6.3.0"
autopep8 = "^2.0.4"
coverage = "^7.4.1"
pytest-cov = "^4.1.0"
ruff = "^0.11.6"
pep8-naming = "^0.13.3"


[tool.ruff]
line-length    = 120
extend-exclude = ["migrations"]

[tool.ruff.lint]
extend-select = [
  "B",    # bugbears
  "C",    # comprehensions
  "Q",    # quotes style
  "S",    # security (bandit)
  "I",    # import ordering
  "W"     # whitespace
]
extend-ignore = [
  "S113",  # no timeout
  "S310",  # unsafe URL open
  "B904",  # missing 'from err' in raise
  "C901",  # too complex
]

[tool.ruff.format]
quote-style = "single"

[tool.ruff.lint.flake8-quotes]
inline-quotes    = "single"

[tool.ruff.lint.per-file-ignores]
"**/__init__.py" = ["F401", "E402", "I"]  # no import ordering on init files
"tests/**/*.py"    = ["B", "C", "S", "F", "E"]  # no strict linting in test files


[tool.pytest.ini_options]
minversion = "2.0"
testpaths = [
   "tests",
]
python_files = [
   "test*.py"
]
norecursedirs = [
   ".git", ".tox", "venv*", "requirements*", "build",
]
log_cli = true
log_cli_level = "1"
filterwarnings = [
   "ignore::UserWarning"
]
markers = [
   "slow",
   "serial",
]

[tool.coverage.run]
branch = true
source = [
   "src/entity-pay",
]
omit = [
    "wsgi.py",
    "gunicorn_config.py"
]

[tool.coverage.report]
exclude_lines = [
   "pragma: no cover",
   "from",
   "import",
   "def __repr__",
   "if self.debug:",
   "if settings.DEBUG",
   "raise AssertionError",
   "raise NotImplementedError",
   "if 0:",
   'if __name__ == "__main__":',
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"