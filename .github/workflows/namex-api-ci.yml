name: Namex API CI

on:
  pull_request:
    types: [assigned, synchronize]
    paths:
      - "api/**"
  workflow_dispatch:

defaults:
  run:
    shell: bash
    working-directory: ./api

jobs:
  linting:
    strategy:
      fail-fast: true
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_directory }}
    steps:
      - uses: actions/checkout@v4
      - name: Install Poetry
        run: |
          pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: ${{ inputs.working_directory }}/pyproject.toml
          cache: poetry
          cache-dependency-path: ${{ inputs.working_directory }}/poetry.lock
      - name: Install dependencies
        run: poetry install
      - name: Run isort
        run: |
          poetry run isort . --check
      - name: Run black
        run: |
          poetry run black . --check
      - name: Run pylint
        run: |
          poetry run pylint .
      - name: Run flake8
        run: |
          poetry run flake8 .
  testing:
    needs: linting
    env:
      DATABASE_TEST_USERNAME: postgres
      DATABASE_TEST_PASSWORD: postgres
      DATABASE_TEST_NAME: postgres
      DATABASE_TEST_HOST: localhost

    runs-on: ubuntu-20.04

    strategy:
      matrix:
        python-version: ["3.12"]

    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Install Poetry
        run: |
          pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: ${{ inputs.working_directory }}/pyproject.toml
          cache: poetry
          cache-dependency-path: ${{ inputs.working_directory }}/poetry.lock
      - name: Install dependencies
        run: poetry install
      - name: Run tests
        run: |
          poetry run pytest
      - uses: actions/upload-artifact@v4
        with:
          name: coveragefile
          path: ${{ inputs.working_directory }}/coverage.xml
          retention-days: 1

  verify-build:
    needs: linting
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_directory }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      - name: build to check strictness
        id: build
        run: |
          docker build --no-cache -t ${{ inputs.app_name }} .