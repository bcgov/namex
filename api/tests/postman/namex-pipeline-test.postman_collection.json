{
	"info": {
		"_postman_id": "4b6e5fcc-2ef3-4244-b322-8c0f8118c9c0",
		"name": "namex-pipeline-test",
		"description": "# Introduction\nWhat does your API do?\n\n# Overview\nThings that the developers should know about\n\n# Authentication\nWhat is the preferred way of using the API?\n\n# Error Codes\nWhat errors and status codes can a user expect?\n\n# Rate limit\nIs there a limit to the number of requests an user can send?",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "setup",
			"item": [
				{
					"name": "Install Postman BDD Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// If the \"postman_bdd_path\" environment variable is set, then we'll use it.",
									"// Otherwise, we'll default to the published version",
									"if (!environment.postman_bdd_path) {",
									"    postman.setGlobalVariable('postman_bdd_path', 'http://bigstickcarpet.com/postman-bdd/dist/postman-bdd.min.js');",
									"}",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// \"install\" Postman BDD",
									"postman.setGlobalVariable('postmanBDD', responseBody);",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-cache"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{postman_bdd_path}}",
							"host": [
								"{{postman_bdd_path}}"
							]
						},
						"description": "This request downloads [Postman BDD](https://github.com/BigstickCarpet/postman-bdd) and then \"installs\" it by setting a global variable\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "authenticate",
			"item": [
				{
					"name": "authenticate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c6720c75-f388-4f9a-a157-c4b4b560a99f",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"token\", jsonData.access_token);",
									"pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
									"",
									"pm.environment.set(\"token_expires\", Date.now()+(jsonData.expires_in * 1000));",
									"pm.environment.set(\"refresh_token_expires\", Date.now()+(jsonData.refresh_expires_in * 1000));",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "grant_type=password&client_id={{clientid}}&username={{userid}}&password={{password}}&client_secret={{client_secret}}"
						},
						"url": {
							"raw": "{{authurl}}/auth/realms/{{realm}}/protocol/openid-connect/token",
							"host": [
								"{{authurl}}"
							],
							"path": [
								"auth",
								"realms",
								"{{realm}}",
								"protocol",
								"openid-connect",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ops",
			"item": [
				{
					"name": "healthz",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7e1752de-06d7-45f9-9443-363572747b13",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"api is healthy\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql('api is healthy');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/nr-ops/healthz",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"nr-ops",
								"healthz"
							]
						}
					},
					"response": []
				},
				{
					"name": "readyz",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b9da565e-e782-443b-9257-f7a3dfafcc58",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"api is ready\", function () {",
									"    var jsonData = pm.response.json();",
									"    //pm.expect(jsonData.message).to.eql('api is ready');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/nr-ops/readyz",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"nr-ops",
								"readyz"
							]
						}
					},
					"response": []
				},
				{
					"name": "echo",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9db68384-c517-460b-975e-258e9c2ab53f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response time is less than 5000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"token includes key:preferred_username\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('preferred_username');",
									"});",
									"",
									"pm.test(\"token includes key:roles\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.realm_access).to.have.property('roles');",
									"});",
									"",
									"pm.test(\"token type:Bearer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.typ).to.eql(\"Bearer\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6055f61a-24f3-489c-a833-6a48ed309bc8",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/requests/echo",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"requests",
								"echo"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "analysis",
			"item": [
				{
					"name": "conflicts",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "83bbced6-bf73-4814-b326-079cef0b8d46",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "53d9f6ae-6779-4a7f-9b05-615b9891d03c",
								"type": "text/javascript",
								"exec": [
									"eval(globals.postmanBDD);",
									"",
									"tests[\"Response time is acceptable\"] = responseTime < 8000;",
									"",
									"it('should be an success response', () => {",
									"    response.ok.should.be.true;            // 2XX",
									"    response.error.should.be.false;          // 4XX or 5XX",
									"    response.clientError.should.be.false;    // 4XX",
									"    response.serverError.should.be.false;   // 5XX",
									"    response.should.have.status(200);",
									"    response.statusType.should.equal(2);",
									"});",
									"",
									"it('should return JSON', () => {",
									"    response.should.be.json;",
									"    response.should.have.header('Content-Type', 'application/json');",
									"    response.type.should.equal('application/json');",
									"});",
									"",
									"it('should contain the un-parsed JSON text', () => {",
									"    response.text.should.be.a('string').with.length.above(10);",
									"});",
									"",
									"it('should contain the parsed JSON keys', () => {",
									"    response.body.should.be.an('object').with.keys(['highlighting', 'names', 'response']);",
									"});",
									"",
									"it('should match against a JSON Schema', () => {",
									"    // For more information about JSON Schema, see https://spacetelescope.github.io/understanding-json-schema/basics.html",
									"    response.body.should.have.schema({",
									"        type: 'object',",
									"        required: ['names', 'highlighting', 'response']",
									"    });",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/requests/NR 8765456/analysis/1/conflicts?start=3&rows=35",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"requests",
								"NR 8765456",
								"analysis",
								"1",
								"conflicts"
							],
							"query": [
								{
									"key": "start",
									"value": "3"
								},
								{
									"key": "rows",
									"value": "35"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "histories",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "09b76a8b-6acd-468e-8b8a-6f46da66c50f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b9e1eabe-cf5b-4d1f-b451-4859541cd9bf",
								"type": "text/javascript",
								"exec": [
									"eval(globals.postmanBDD);",
									"",
									"tests[\"Response time is acceptable\"] = responseTime < 8000;",
									"",
									"it('should be an success response', () => {",
									"    response.ok.should.be.true;            // 2XX",
									"    response.error.should.be.false;          // 4XX or 5XX",
									"    response.clientError.should.be.false;    // 4XX",
									"    response.serverError.should.be.false;   // 5XX",
									"    response.should.have.status(200);",
									"    response.statusType.should.equal(2);",
									"});",
									"",
									"it('should return JSON', () => {",
									"    response.should.be.json;",
									"    response.should.have.header('Content-Type', 'application/json');",
									"    response.type.should.equal('application/json');",
									"});",
									"",
									"it('should contain the un-parsed JSON text', () => {",
									"    response.text.should.be.a('string').with.length.above(10);",
									"});",
									"",
									"it('should contain the parsed JSON keys', () => {",
									"    response.body.should.be.an('object').with.keys(['highlighting', 'names', 'response']);",
									"});",
									"",
									"it('should match against a JSON Schema', () => {",
									"    // For more information about JSON Schema, see https://spacetelescope.github.io/understanding-json-schema/basics.html",
									"    response.body.should.have.schema({",
									"        type: 'object',",
									"        required: ['names', 'highlighting', 'response']",
									"    });",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/requests/NR 8765456/analysis/1/histories?start=1&rows=32",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"requests",
								"NR 8765456",
								"analysis",
								"1",
								"histories"
							],
							"query": [
								{
									"key": "start",
									"value": "1"
								},
								{
									"key": "rows",
									"value": "32"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "trademarks",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7fb8750f-14da-49a5-9e46-cf863344a97e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cf6fa36e-812c-4b39-a907-0dd59d99d5cf",
								"type": "text/javascript",
								"exec": [
									"eval(globals.postmanBDD);",
									"",
									"it('should be an success response', () => {",
									"    response.ok.should.be.true;            // 2XX",
									"    response.error.should.be.false;          // 4XX or 5XX",
									"    response.clientError.should.be.false;    // 4XX",
									"    response.serverError.should.be.false;   // 5XX",
									"    response.should.have.status(200);",
									"    response.statusType.should.equal(2);",
									"});",
									"",
									"it('should return JSON', () => {",
									"    response.should.be.json;",
									"    response.should.have.header('Content-Type', 'application/json');",
									"    response.type.should.equal('application/json');",
									"});",
									"",
									"it('should contain the un-parsed JSON text', () => {",
									"    response.text.should.be.a('string').with.length.above(10);",
									"});",
									"",
									"it('should contain the parsed JSON keys', () => {",
									"    response.body.should.be.an('object').with.keys(['highlighting', 'names', 'response']);",
									"});",
									"",
									"it('should match against a JSON Schema', () => {",
									"    // For more information about JSON Schema, see https://spacetelescope.github.io/understanding-json-schema/basics.html",
									"    response.body.should.have.schema({",
									"        type: 'object',",
									"        required: ['names', 'highlighting', 'response']",
									"    });",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/requests/NR 8765456/analysis/1/trademarks?start=1&rows=32",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"requests",
								"NR 8765456",
								"analysis",
								"1",
								"trademarks"
							],
							"query": [
								{
									"key": "start",
									"value": "1"
								},
								{
									"key": "rows",
									"value": "32"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "requests+names",
			"item": [
				{
					"name": "requests/queues/@me/oldest",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3a38f65b-a9a5-4bcf-93fc-4d4c6cabe933",
								"type": "text/javascript",
								"exec": [
									"it('should be an success response', () => {",
									"    response.ok.should.be.true;            // 2XX",
									"    response.error.should.be.false;          // 4XX or 5XX",
									"    response.clientError.should.be.false;    // 4XX",
									"    response.serverError.should.be.false;   // 5XX",
									"    response.statusType.should.equal(2);",
									"});",
									"",
									"pm.test(\"Response time is less than 8000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(8000);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"if (typeof jsonData.nameRequest !== 'undefined' || jsonData.nameRequest !== null) {",
									"   pm.environment.set(\"queued_nr\", jsonData.nameRequest);",
									"}else{",
									"   pm.environment.unset(\"queued_nr\");    ",
									"}",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c9bd0a12-0790-4f22-959b-4fbcfd4779d5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/requests/queues/@me/oldest",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"requests",
								"queues",
								"@me",
								"oldest"
							]
						}
					},
					"response": []
				},
				{
					"name": "requests/queues/@me/oldest getsame again",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "10fb8743-f67b-4540-a06a-391055527a04",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Same value as previous get from queue\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nameRequest).to.eql( pm.environment.get(\"queued_nr\"));",
									"});",
									"",
									"pm.environment.unset(\"queued_nr\");  ",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/requests/queues/@me/oldest",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"requests",
								"queues",
								"@me",
								"oldest"
							]
						}
					},
					"response": []
				},
				{
					"name": "requests/NR 8765456-test",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "36e019ae-a7c4-4599-8631-564ad3d11ef0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "346c9a5d-ee8f-48cd-9b21-bad29baf9ecb",
								"type": "text/javascript",
								"exec": [
									"eval(globals.postmanBDD);",
									"",
									"tests[\"Response time is acceptable\"] = responseTime < 8000;",
									"",
									"it('Should be an success response', () => {",
									"    response.ok.should.be.true;            // 2XX",
									"    response.error.should.be.false;          // 4XX or 5XX",
									"    response.clientError.should.be.false;    // 4XX",
									"    response.serverError.should.be.false;   // 5XX",
									"    response.should.have.status(200);",
									"    response.statusType.should.equal(2);",
									"});",
									"",
									"it('Should return JSON', () => {",
									"    response.should.be.json;",
									"    response.should.have.header('Content-Type', 'application/json');",
									"    response.type.should.equal('application/json');",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"it('Should contain \\'message\\' confirming patch', () => {",
									"    response.body.should.be.an('object').with.keys(['message']);",
									"    jsonData.message.should.include('- patched');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"state\": \"INPROGRESS\"}"
						},
						"url": {
							"raw": "{{url}}/api/v1/requests/NR 8765456",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"requests",
								"NR 8765456"
							]
						}
					},
					"response": []
				},
				{
					"name": "requests/NR 8765456/names/1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6a01c013-3092-4bd2-be65-7adc5421a9ec",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0ebe351b-0618-4dd9-821c-8659eb5f189d",
								"type": "text/javascript",
								"exec": [
									"eval(globals.postmanBDD);",
									"",
									"tests[\"Response time is acceptable\"] = responseTime < 8000;",
									"",
									"it('Should be an success response', () => {",
									"    response.ok.should.be.true;            // 2XX",
									"    response.error.should.be.false;          // 4XX or 5XX",
									"    response.clientError.should.be.false;    // 4XX",
									"    response.serverError.should.be.false;   // 5XX",
									"    response.should.have.status(200);",
									"    response.statusType.should.equal(2);",
									"});",
									"",
									"it('Should return JSON', () => {",
									"    response.should.be.json;",
									"    response.should.have.header('Content-Type', 'application/json');",
									"    response.type.should.equal('application/json');",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"it('Should contain \\'message\\' confirming patch', () => {",
									"    response.body.should.be.an('object').with.keys(['message']);",
									"    jsonData.message.should.include('Patched NR');",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"state\": \"A\"}"
						},
						"url": {
							"raw": "{{url}}/api/v1/requests/NR 8765456/names/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"requests",
								"NR 8765456",
								"names",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/requests/NR 8765456/names/1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5e5e7102-694d-4200-a50b-5401e06d4ad1",
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "28a92954-ab7f-4711-a5a4-31b22f0b671c",
								"type": "text/javascript",
								"exec": [
									"eval(globals.postmanBDD);",
									"",
									"tests[\"Response time is acceptable\"] = responseTime < 8000;",
									"",
									"it('Should be an success response', () => {",
									"    response.ok.should.be.true;            // 2XX",
									"    response.error.should.be.false;          // 4XX or 5XX",
									"    response.clientError.should.be.false;    // 4XX",
									"    response.serverError.should.be.false;   // 5XX",
									"    response.should.have.status(200);",
									"    response.statusType.should.equal(2);",
									"});",
									"",
									"it('Should return a string', () => {",
									"    response.body.should.be.string;",
									"});",
									"",
									"it('Should contain the required properties', () => {",
									"    response.text.should.include(\"designation\");",
									"    response.text.should.include(\"name\");",
									"    response.text.should.include(\"state\");",
									"    response.text.should.include(\"choice\");",
									"    response.text.should.include(\"consumptionDate\");",
									"    response.text.should.include(\"decision_text\");",
									"    response.text.should.include(\"conflict1\");",
									"    response.text.should.include(\"conflict2\");",
									"    response.text.should.include(\"conflict3\");",
									"    response.text.should.include(\"conflict1_num\");",
									"    response.text.should.include(\"conflict2_num\");",
									"    response.text.should.include(\"conflict3_num\");",
									"});",
									"",
									"it('Should include \\\"state\\\": \\\"A\\\" as a result of the previous patch', () => {",
									"    response.text.should.include(\"\\\"state\\\": \\\"A\\\"\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/requests/NR 8765456/names/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"requests",
								"NR 8765456",
								"names",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "requests/NR 8765456/names/1-test",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c5e4a699-86b1-4a9a-9777-8cf6f5adeb81",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "012539ff-3a68-4fa6-aae8-26f7bcf096e5",
								"type": "text/javascript",
								"exec": [
									"eval(globals.postmanBDD);",
									"",
									"tests[\"Response time is acceptable\"] = responseTime < 8000;",
									"",
									"it('Should be an success response', () => {",
									"    response.ok.should.be.true;            // 2XX",
									"    response.error.should.be.false;          // 4XX or 5XX",
									"    response.clientError.should.be.false;    // 4XX",
									"    response.serverError.should.be.false;   // 5XX",
									"    response.should.have.status(200);",
									"    response.statusType.should.equal(2);",
									"});",
									"",
									"it('Should return JSON', () => {",
									"    response.should.be.json;",
									"    response.should.have.header('Content-Type', 'application/json');",
									"    response.type.should.equal('application/json');",
									"});",
									"",
									"it('Should contain the un-parsed JSON text', () => {",
									"    response.text.should.be.a('string').with.length.above(10);",
									"});",
									"",
									"it('Should contain the parsed JSON key: message', () => {",
									"    response.body.should.be.an('object').with.keys(['message']);",
									"});",
									"",
									"it('Should contain changes in the returned message', () => {",
									"    response.body.message.should.include(\"'state': 'R'\");",
									"    response.body.message.should.include(\"'name': 'PUT success'\");",
									"})"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"conflict1\": null, \"designation\": null, \"state\": \"R\", \"conflict3_num\": null, \"choice\": 1, \"conflict1_num\": null, \"name\": \"PUT success\", \"conflict2\": null, \"conflict3\": null, \"consumptionDate\": null, \"decision_text\": null, \"conflict2_num\": null}"
						},
						"url": {
							"raw": "{{url}}/api/v1/requests/NR 8765456/names/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"requests",
								"NR 8765456",
								"names",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/requests/NR 8765456/names/1 - test update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5e5e7102-694d-4200-a50b-5401e06d4ad1",
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "aba7f070-e907-4238-89ed-8bc85dab8b9a",
								"type": "text/javascript",
								"exec": [
									"eval(globals.postmanBDD);",
									"",
									"tests[\"Response time is acceptable\"] = responseTime < 8000;",
									"",
									"it('Should be an success response', () => {",
									"    response.ok.should.be.true;            // 2XX",
									"    response.error.should.be.false;          // 4XX or 5XX",
									"    response.clientError.should.be.false;    // 4XX",
									"    response.serverError.should.be.false;   // 5XX",
									"    response.should.have.status(200);",
									"    response.statusType.should.equal(2);",
									"});",
									"",
									"it('Should return a string', () => {",
									"    response.body.should.be.string;",
									"});",
									"",
									"it('Should contain the required properties', () => {",
									"    response.text.should.include(\"designation\");",
									"    response.text.should.include(\"name\");",
									"    response.text.should.include(\"state\");",
									"    response.text.should.include(\"choice\");",
									"    response.text.should.include(\"consumptionDate\");",
									"    response.text.should.include(\"decision_text\");",
									"    response.text.should.include(\"conflict1\");",
									"    response.text.should.include(\"conflict2\");",
									"    response.text.should.include(\"conflict3\");",
									"    response.text.should.include(\"conflict1_num\");",
									"    response.text.should.include(\"conflict2_num\");",
									"    response.text.should.include(\"conflict3_num\");",
									"});",
									"",
									"it('Should return the new data updated by the previous PUT', () => {",
									"    response.text.should.include(\"\\\"state\\\": \\\"R\\\"\");",
									"    response.text.should.include(\"\\\"name\\\": \\\"PUT success\\\"\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/requests/NR 8765456/names/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"requests",
								"NR 8765456",
								"names",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "requests/NR 8765456/names/1-reset",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c5e4a699-86b1-4a9a-9777-8cf6f5adeb81",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0318ce1b-c65b-41a6-912b-2da49a915eb2",
								"type": "text/javascript",
								"exec": [
									"eval(globals.postmanBDD);",
									"",
									"tests[\"Response time is acceptable\"] = responseTime < 8000;",
									"",
									"it('Should be an success response', () => {",
									"    response.ok.should.be.true;            // 2XX",
									"    response.error.should.be.false;          // 4XX or 5XX",
									"    response.clientError.should.be.false;    // 4XX",
									"    response.serverError.should.be.false;   // 5XX",
									"    response.should.have.status(200);",
									"    response.statusType.should.equal(2);",
									"});",
									"",
									"it('Should return JSON', () => {",
									"    response.should.be.json;",
									"    response.should.have.header('Content-Type', 'application/json');",
									"    response.type.should.equal('application/json');",
									"});",
									"",
									"it('Should contain the un-parsed JSON text', () => {",
									"    response.text.should.be.a('string').with.length.above(10);",
									"});",
									"",
									"it('Should contain the parsed JSON key: message', () => {",
									"    response.body.should.be.an('object').with.keys(['message']);",
									"});",
									"",
									"it('Should contain changes in the returned message', () => {",
									"    response.body.message.should.include(\"\\'state\\': \\'NE\\'\");",
									"    response.body.message.should.include(\"\\'name\\': \\'META GROWTH ENTERPRISES INC.\\'\");",
									"})"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"conflict1\": null, \"designation\": null, \"state\": \"NE\", \"conflict3_num\": null, \"choice\": 1, \"conflict1_num\": null, \"name\": \"META GROWTH ENTERPRISES INC.\", \"conflict2\": null, \"conflict3\": null, \"consumptionDate\": null, \"decision_text\": null, \"conflict2_num\": null}"
						},
						"url": {
							"raw": "{{url}}/api/v1/requests/NR 8765456/names/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"requests",
								"NR 8765456",
								"names",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/requests - put NR 8765456-test",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9c4348e-9326-4a6d-b726-b4494602c58e",
								"type": "text/javascript",
								"exec": [
									"eval(globals.postmanBDD);",
									"",
									"pm.test(\"Response time is less than 3000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});",
									"",
									"it('should be an success response', () => {",
									"    response.ok.should.be.true;            // 2XX",
									"    response.error.should.be.false;          // 4XX or 5XX",
									"    response.clientError.should.be.false;    // 4XX",
									"    response.serverError.should.be.false;   // 5XX",
									"    response.should.have.status(200);",
									"    response.statusType.should.equal(2);",
									"});",
									"",
									"it('should return JSON', () => {",
									"    response.should.be.json;",
									"    response.should.have.header('Content-Type', 'application/json');",
									"    response.type.should.equal('application/json');",
									"});",
									"",
									"it('should contain the un-parsed JSON text', () => {",
									"    response.text.should.be.a('string').with.length.above(10);",
									"});",
									"",
									"it(\"Should return the required fields for an NR\", () => {",
									"    response.body.should.be.an('object').with.keys(['additionalInfo','applicants','comments','consentFlag','corpNum','expirationDate','furnished','id','lastUpdate','names','natureBusinessInfo','nrNum','nwpta','previousNr','priorityCd','requestTypeCd','state','submitCount','submittedDate','submitter_userid','userId','xproJurisdiction']);",
									"});",
									"",
									"it(\"Should return updated changes in the body\", () => {",
									"   response.body.additionalInfo.should.include(\"Name was previously put in for incorporation but it is actually for an extra-provincial registration\");",
									"   for (var i=0; i<response.body.names.length;i++) {",
									"       if (response.body.names[i].choice == 1) {",
									"           response.body.names[i].name.should.include(\"BOOKED BY US Inc.\");",
									"       }",
									"   }",
									"   response.body.natureBusinessInfo.should.include(\"fencing equipment supply\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"additionalInfo\": \"Name was previously put in for incorporation but it is actually for an extra-provincial registration\",\n    \"applicants\": \"\",\n    \"comments\": [],\n    \"consentFlag\": null,\n    \"corpNum\": null,\n    \"expirationDate\": null,\n    \"furnished\": \"N\",\n    \"id\": 28163,\n    \"lastUpdate\": \"Fri, 17 Aug 2018 23:47:55 GMT\",\n    \"names\": [\n        {\n            \"choice\": 2,\n            \"conflict1\": null,\n            \"conflict1_num\": null,\n            \"conflict2\": null,\n            \"conflict2_num\": null,\n            \"conflict3\": null,\n            \"conflict3_num\": null,\n            \"consumptionDate\": null,\n            \"decision_text\": null,\n            \"name\": \"WAVE DYNAMICS CONSULTING, INC.\",\n            \"state\": \"NE\"\n        },\n        {\n            \"choice\": 1,\n            \"conflict1\": null,\n            \"conflict1_num\": null,\n            \"conflict2\": null,\n            \"conflict2_num\": null,\n            \"conflict3\": null,\n            \"conflict3_num\": null,\n            \"consumptionDate\": null,\n            \"decision_text\": null,\n            \"name\": \"BOOKED BY US Inc.\",\n            \"state\": \"NE\"\n        },\n        {\n            \"choice\": 3,\n            \"conflict1\": \"\",\n            \"conflict1_num\": \"\",\n            \"conflict2\": \"\",\n            \"conflict2_num\": \"\",\n            \"conflict3\": \"\",\n            \"conflict3_num\": \"\",\n            \"consumptionDate\": null,\n            \"decision_text\": \"\",\n            \"name\": \"test2\",\n            \"state\": \"NE\"\n        }\n    ],\n    \"natureBusinessInfo\": \"fencing equipment supply\",\n    \"nrNum\": \"NR 8765456\",\n    \"nwpta\": [],\n    \"previousNr\": null,\n    \"priorityCd\": \"N\",\n    \"requestTypeCd\": \"XCR\",\n    \"state\": \"INPROGRESS\",\n    \"submitCount\": 1,\n    \"submittedDate\": \"Thu, 20 Apr 2006 11:56:22 GMT\",\n    \"submitter_userid\": \"\",\n    \"userId\": \"kial-ex\",\n    \"xproJurisdiction\": \"OREGON, USA\"\n}\n"
						},
						"url": {
							"raw": "{{url}}/api/v1/requests/NR 8765456",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"requests",
								"NR 8765456"
							]
						}
					},
					"response": []
				},
				{
					"name": "requests/NR 8765456",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "262230a7-feab-4c42-a075-bd3638472c07",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4453a42c-916b-4541-b34a-078a143ea050",
								"type": "text/javascript",
								"exec": [
									"eval(globals.postmanBDD);",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"it('should be an success response', () => {",
									"    response.ok.should.be.true;            // 2XX",
									"    response.error.should.be.false;          // 4XX or 5XX",
									"    response.clientError.should.be.false;    // 4XX",
									"    response.serverError.should.be.false;   // 5XX",
									"    response.should.have.status(200);",
									"    response.statusType.should.equal(2);",
									"});",
									"",
									"it('should return JSON', () => {",
									"    response.should.be.json;",
									"    response.should.have.header('Content-Type', 'application/json');",
									"    response.type.should.equal('application/json');",
									"});",
									"",
									"it('should contain the un-parsed JSON text', () => {",
									"    response.text.should.be.a('string').with.length.above(10);",
									"});",
									"",
									"it(\"Should return the required fields for an NR\", () => {",
									"    response.body.should.be.an('object').with.keys(['additionalInfo','applicants','comments','consentFlag','corpNum','expirationDate','furnished','id','lastUpdate','names','natureBusinessInfo','nrNum','nwpta','previousNr','priorityCd','requestTypeCd','state','submitCount','submittedDate','submitter_userid','userId','xproJurisdiction']);",
									"});",
									"",
									"it(\"Should return updated changes by previous PUT\", () => {",
									"   response.body.additionalInfo.should.include(\"Name was previously put in for incorporation but it is actually for an extra-provincial registration\");",
									"   for (var i=0; i<response.body.names.length;i++) {",
									"       if (response.body.names[i].choice == 1) {",
									"           response.body.names[i].name.should.include(\"BOOKED BY US Inc.\");",
									"       }",
									"   }",
									"   response.body.natureBusinessInfo.should.include(\"fencing equipment supply\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/requests/NR 8765456",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"requests",
								"NR 8765456"
							]
						}
					},
					"response": []
				},
				{
					"name": "/requests - put NR 8765456-reset",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "790c8060-5dbc-4816-ae13-d4ba2eac1547",
								"type": "text/javascript",
								"exec": [
									"eval(globals.postmanBDD);",
									"",
									"pm.test(\"Response time is less than 3000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});",
									"",
									"it('should be an success response', () => {",
									"    response.ok.should.be.true;            // 2XX",
									"    response.error.should.be.false;          // 4XX or 5XX",
									"    response.clientError.should.be.false;    // 4XX",
									"    response.serverError.should.be.false;   // 5XX",
									"    response.should.have.status(200);",
									"    response.statusType.should.equal(2);",
									"});",
									"",
									"it('should return JSON', () => {",
									"    response.should.be.json;",
									"    response.should.have.header('Content-Type', 'application/json');",
									"    response.type.should.equal('application/json');",
									"});",
									"",
									"it('should contain the un-parsed JSON text', () => {",
									"    response.text.should.be.a('string').with.length.above(10);",
									"});",
									"",
									"it(\"Should return the required fields for an NR\", () => {",
									"    response.body.should.be.an('object').with.keys(['additionalInfo','applicants','comments','consentFlag','corpNum','expirationDate','furnished','id','lastUpdate','names','natureBusinessInfo','nrNum','nwpta','previousNr','priorityCd','requestTypeCd','state','submitCount','submittedDate','submitter_userid','userId','xproJurisdiction']);",
									"});",
									"",
									"it(\"Should return old values for this NR\", () => {",
									"   response.body.additionalInfo.should.include(\"NATURE OF BUS: ELECTRICAL/COMPUTER ENG CONSULTING INCORPORATED IN OREGON AS WAVE DYNAMICS, INC.\");",
									"   response.body.id.should.equal(28163);",
									"   response.body.submitCount.should.equal(1);",
									"   response.body.state.should.include(\"HOLD\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"additionalInfo\": \"NATURE OF BUS: ELECTRICAL/COMPUTER ENG CONSULTING INCORPORATED IN OREGON AS WAVE DYNAMICS, INC.\",\n    \"comments\": [],\n    \"consentFlag\": null,\n    \"corpNum\": null,\n    \"furnished\": \"N\",\n    \"id\": 28163,\n    \"lastUpdate\": \"Fri, 03 Aug 2018 17:12:35 GMT\",\n    \"names\": [\n        {\n            \"choice\": 2,\n            \"conflict1\": null,\n            \"conflict1_num\": null,\n            \"conflict2\": null,\n            \"conflict2_num\": null,\n            \"conflict3\": null,\n            \"conflict3_num\": null,\n            \"consumptionDate\": null,\n            \"decision_text\": null,\n            \"name\": \"WAVE DYNAMICS CONSULTING, INC.\",\n            \"state\": \"NE\"\n        },\n        {\n            \"choice\": 1,\n            \"conflict1\": null,\n            \"conflict1_num\": null,\n            \"conflict2\": null,\n            \"conflict2_num\": null,\n            \"conflict3\": null,\n            \"conflict3_num\": null,\n            \"consumptionDate\": null,\n            \"decision_text\": null,\n            \"name\": \"WAVE DYNAMICS, INC.\",\n            \"state\": \"NE\"\n        }\n    ],\n    \"natureBusinessInfo\": null,\n    \"nrNum\": \"NR 8765456\",\n    \"nwpta\": [],\n    \"previousNr\": null,\n    \"priorityCd\": \"N\",\n    \"requestTypeCd\": \"XCR\",\n    \"state\": \"HOLD\",\n    \"submitCount\": 1,\n    \"submittedDate\": \"Thu, 20 Apr 2006 11:56:22 GMT\",\n    \"submitter_userid\": \"\",\n    \"userId\": \"kial-ex\",\n    \"xproJurisdiction\": \"OREGON, USA\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/requests/NR 8765456",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"requests",
								"NR 8765456"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "request-search",
			"item": [
				{
					"name": "/requests - no params",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "499cb36e-a63a-4d12-ab4c-ee484a04809a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c3b20ffb-bd96-454a-8332-b20139f1d2f2",
								"type": "text/javascript",
								"exec": [
									"eval(globals.postmanBDD);",
									"",
									" tests[\"Response time is acceptable\"] = responseTime < 8000;",
									"",
									"",
									"it('should be an success response', () => {",
									"    response.ok.should.be.true;            // 2XX",
									"    response.error.should.be.false;          // 4XX or 5XX",
									"    response.clientError.should.be.false;    // 4XX",
									"    response.serverError.should.be.false;   // 5XX",
									"    response.should.have.status(200);",
									"    response.statusType.should.equal(2);",
									"});",
									"",
									"it('should return JSON', () => {",
									"    response.should.be.json;",
									"    response.should.have.header('Content-Type', 'application/json');",
									"    response.type.should.equal('application/json');",
									"});",
									"",
									"it('should contain the un-parsed JSON text', () => {",
									"    response.text.should.be.a('string').with.length.above(10);",
									"});",
									"",
									"it('should contain the parsed JSON keys', () => {",
									"    response.body.should.be.an('object').with.keys(['nameRequests','response']);",
									"});",
									"//'activeUser', 'names', 'comments', 'expirationDate', 'furnished', 'nrNum', 'priorityCd', 'submittedDate'",
									"",
									"it('should match against a JSON Schema', () => {",
									"    // For more information about JSON Schema, see https://spacetelescope.github.io/understanding-json-schema/basics.html",
									"    response.body.should.have.schema({",
									"        type: 'object',",
									"        required: ['nameRequests', 'response']",
									"    });",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"it('Should return the required fields in nameRequests', () => {",
									"    var nameRequests = jsonData.nameRequests[0];",
									"    for (var i=0;i<nameRequests.length;i++) {",
									"        nameRequests[i].should.have.schema({",
									"            type: 'object',",
									"            required: ['activeUser','comments','furnished','lastUpdate','names','natureBusinessInfo','nrNum','nroLastUpdate','priorityCd','requestTypeCd','stateCd','submitCount','submittedDate','xproJurisdiction']",
									"        });",
									"    }",
									"}); "
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/requests",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "/requests - start & end",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7a815bfc-89d6-4d8f-bff2-48b09aabf83e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dd5dc319-9fa0-4819-8163-18054bff2f25",
								"type": "text/javascript",
								"exec": [
									"eval(globals.postmanBDD);",
									"",
									" tests[\"Response time is acceptable\"] = responseTime < 8000;",
									"",
									"",
									"it('should be an success response', () => {",
									"    response.ok.should.be.true;            // 2XX",
									"    response.error.should.be.false;          // 4XX or 5XX",
									"    response.clientError.should.be.false;    // 4XX",
									"    response.serverError.should.be.false;   // 5XX",
									"    response.should.have.status(200);",
									"    response.statusType.should.equal(2);",
									"});",
									"",
									"it('should return JSON', () => {",
									"    response.should.be.json;",
									"    response.should.have.header('Content-Type', 'application/json');",
									"    response.type.should.equal('application/json');",
									"});",
									"",
									"it('should contain the un-parsed JSON text', () => {",
									"    response.text.should.be.a('string').with.length.above(10);",
									"});",
									"",
									"it('should contain the parsed JSON keys', () => {",
									"    response.body.should.be.an('object').with.keys(['nameRequests','response']);",
									"});",
									"//'activeUser', 'names', 'comments', 'expirationDate', 'furnished', 'nrNum', 'priorityCd', 'submittedDate'",
									"",
									"it('should match against a JSON Schema', () => {",
									"    // For more information about JSON Schema, see https://spacetelescope.github.io/understanding-json-schema/basics.html",
									"    response.body.should.have.schema({",
									"        type: 'object',",
									"        required: ['nameRequests', 'response']",
									"    });",
									"});",
									"",
									"// isn't checking schema",
									"//TODO fix the schema checking",
									"const searchSchema = {",
									"    \"title\": \"nameRequest\",",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"activeUser\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"furnished\": {",
									"            \"type\": \"string\"",
									"        }",
									"    }",
									" //   \"required\": [\"firstName\", \"lastName\"]",
									"}",
									"",
									"// Test whether the response matches the schema",
									"it('should match the search schema', () => {",
									"//    var customerSchema = JSON.parse(environment.customerSchema));",
									"    response.body.should.have.schema(searchSchema);",
									"  });",
									"",
									"pm.test(\"Response echoes rows == 10\", () => {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.rows).to.eql(10);",
									"});",
									"",
									"it('should get an array of 10 nameRequests', () => {",
									"    response.body.nameRequests[0].length.should.eq(10);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/requests?start=10&rows=10",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"requests"
							],
							"query": [
								{
									"key": "start",
									"value": "10"
								},
								{
									"key": "rows",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/requests - queue = HOLD",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e1a55e74-5c04-4485-989c-25bbcaa94b4a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "95e35078-04fe-476b-b360-ba4bf658257e",
								"type": "text/javascript",
								"exec": [
									"eval(globals.postmanBDD);",
									"",
									" tests[\"Response time is acceptable\"] = responseTime < 8000;",
									"",
									"",
									"it('Should be an success response', () => {",
									"    response.ok.should.be.true;            // 2XX",
									"    response.error.should.be.false;          // 4XX or 5XX",
									"    response.clientError.should.be.false;    // 4XX",
									"    response.serverError.should.be.false;   // 5XX",
									"    response.should.have.status(200);",
									"    response.statusType.should.equal(2);",
									"});",
									"",
									"it('Should return JSON', () => {",
									"    response.should.be.json;",
									"    response.should.have.header('Content-Type', 'application/json');",
									"    response.type.should.equal('application/json');",
									"});",
									"",
									"it('Should contain the un-parsed JSON text', () => {",
									"    response.text.should.be.a('string').with.length.above(10);",
									"});",
									"",
									"it('Should contain the parsed JSON keys', () => {",
									"    response.body.should.be.an('object').with.keys(['nameRequests','response']);",
									"});",
									"//'activeUser', 'names', 'comments', 'expirationDate', 'furnished', 'nrNum', 'priorityCd', 'submittedDate'",
									"",
									"it('Should match against a JSON Schema', () => {",
									"    // For more information about JSON Schema, see https://spacetelescope.github.io/understanding-json-schema/basics.html",
									"    response.body.should.have.schema({",
									"        type: 'object',",
									"        required: ['nameRequests', 'response']",
									"    });",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"it('Should return the required fields in nameRequests', () => {",
									"    var nameRequests = jsonData.nameRequests[0];",
									"    for (var i=0;i<nameRequests.length;i++) {",
									"        nameRequests[i].should.have.schema({",
									"            type: 'object',",
									"            required: ['comments','furnished','lastUpdate','names','natureBusinessInfo','nrNum','nroLastUpdate','priorityCd','requestTypeCd','stateCd','submitCount','submittedDate','xproJurisdiction']",
									"        });",
									"    }",
									"}); ",
									"",
									"describe('All NameRequests should be in \\'HOLD\\'', () => {",
									"  it('Should check the id property is present', () => {",
									"      for(i=0; i < response.body.nameRequests[0].length; i++) {",
									"          response.body.nameRequests[0][i].should.have.property('stateCd')",
									"          response.body.nameRequests[0][i].stateCd.should.equal('HOLD')",
									"      }",
									"  })",
									"})",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/requests?queue=hold&rows=10",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"requests"
							],
							"query": [
								{
									"key": "queue",
									"value": "hold"
								},
								{
									"key": "rows",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/requests - queue = INPROGRESS Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3d818d6a-3381-437f-b613-77ac1a5db3b6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "016e6990-f48a-4668-a3ae-63a56b4d94d0",
								"type": "text/javascript",
								"exec": [
									"eval(globals.postmanBDD);",
									"",
									" tests[\"Response time is acceptable\"] = responseTime < 8000;",
									"",
									"",
									"it('Should be an success response', () => {",
									"    response.ok.should.be.true;            // 2XX",
									"    response.error.should.be.false;          // 4XX or 5XX",
									"    response.clientError.should.be.false;    // 4XX",
									"    response.serverError.should.be.false;   // 5XX",
									"    response.should.have.status(200);",
									"    response.statusType.should.equal(2);",
									"});",
									"",
									"it('Should return JSON', () => {",
									"    response.should.be.json;",
									"    response.should.have.header('Content-Type', 'application/json');",
									"    response.type.should.equal('application/json');",
									"});",
									"",
									"it('Should contain the un-parsed JSON text', () => {",
									"    response.text.should.be.a('string').with.length.above(10);",
									"});",
									"",
									"it('Should contain the parsed JSON keys', () => {",
									"    response.body.should.be.an('object').with.keys(['nameRequests','response']);",
									"});",
									"//'activeUser', 'names', 'comments', 'expirationDate', 'furnished', 'nrNum', 'priorityCd', 'submittedDate'",
									"",
									"it('Should match against a JSON Schema', () => {",
									"    // For more information about JSON Schema, see https://spacetelescope.github.io/understanding-json-schema/basics.html",
									"    response.body.should.have.schema({",
									"        type: 'object',",
									"        required: ['nameRequests', 'response']",
									"    });",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"it('Should return the required fields in nameRequests', () => {",
									"    var nameRequests = jsonData.nameRequests[0];",
									"    for (var i=0;i<nameRequests.length;i++) {",
									"        nameRequests[i].should.have.schema({",
									"            type: 'object',",
									"            required: ['comments','furnished','lastUpdate','names','natureBusinessInfo','nrNum','nroLastUpdate','priorityCd','requestTypeCd','stateCd','submitCount','submittedDate','xproJurisdiction']",
									"        });",
									"    }",
									"}); ",
									"",
									"describe('All NameRequests should be in \\'INPROGRESS\\'', () => {",
									"  it('Should check the id property is present', () => {",
									"      for(i=0; i < response.body.nameRequests[0].length; i++) {",
									"          response.body.nameRequests[0][i].should.have.property('stateCd')",
									"          response.body.nameRequests[0][i].stateCd.should.equal('INPROGRESS')",
									"      }",
									"  })",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/requests?queue=inprogress&rows=10",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"requests"
							],
							"query": [
								{
									"key": "queue",
									"value": "inprogress"
								},
								{
									"key": "rows",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/requests - queue = DRAFT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3d818d6a-3381-437f-b613-77ac1a5db3b6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1ddd411d-6b91-40ec-9ba4-61298d954fd4",
								"type": "text/javascript",
								"exec": [
									"eval(globals.postmanBDD);",
									"",
									" tests[\"Response time is acceptable\"] = responseTime < 8000;",
									"",
									"",
									"it('Should be an success response', () => {",
									"    response.ok.should.be.true;            // 2XX",
									"    response.error.should.be.false;          // 4XX or 5XX",
									"    response.clientError.should.be.false;    // 4XX",
									"    response.serverError.should.be.false;   // 5XX",
									"    response.should.have.status(200);",
									"    response.statusType.should.equal(2);",
									"});",
									"",
									"it('Should return JSON', () => {",
									"    response.should.be.json;",
									"    response.should.have.header('Content-Type', 'application/json');",
									"    response.type.should.equal('application/json');",
									"});",
									"",
									"it('Should contain the un-parsed JSON text', () => {",
									"    response.text.should.be.a('string').with.length.above(10);",
									"});",
									"",
									"it('Should contain the parsed JSON keys', () => {",
									"    response.body.should.be.an('object').with.keys(['nameRequests','response']);",
									"});",
									"//'activeUser', 'names', 'comments', 'expirationDate', 'furnished', 'nrNum', 'priorityCd', 'submittedDate'",
									"",
									"it('Should match against a JSON Schema', () => {",
									"    // For more information about JSON Schema, see https://spacetelescope.github.io/understanding-json-schema/basics.html",
									"    response.body.should.have.schema({",
									"        type: 'object',",
									"        required: ['nameRequests', 'response']",
									"    });",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"it('Should return the required fields in nameRequests', () => {",
									"    var nameRequests = jsonData.nameRequests[0];",
									"    for (var i=0;i<nameRequests.length;i++) {",
									"        nameRequests[i].should.have.schema({",
									"            type: 'object',",
									"            required: ['comments','furnished','lastUpdate','names','natureBusinessInfo','nrNum','nroLastUpdate','priorityCd','requestTypeCd','stateCd','submitCount','submittedDate','xproJurisdiction']",
									"        });",
									"    }",
									"}); ",
									"",
									"describe('All NameRequests should be in \\'DRAFT\\'', () => {",
									"  it('Should check the id property is present', () => {",
									"      for(i=0; i < response.body.nameRequests[0].length; i++) {",
									"          response.body.nameRequests[0][i].should.have.property('stateCd')",
									"          response.body.nameRequests[0][i].stateCd.should.equal('DRAFT')",
									"      }",
									"  })",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/requests?queue=draft&rows=10",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"requests"
							],
							"query": [
								{
									"key": "queue",
									"value": "draft"
								},
								{
									"key": "rows",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/requests - queue = CONDITIONAL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3d818d6a-3381-437f-b613-77ac1a5db3b6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9ecd37a6-cd7d-4064-9c76-144e8eb65413",
								"type": "text/javascript",
								"exec": [
									"eval(globals.postmanBDD);",
									"",
									" tests[\"Response time is acceptable\"] = responseTime < 8000;",
									"",
									"",
									"it('Should be an success response', () => {",
									"    response.ok.should.be.true;            // 2XX",
									"    response.error.should.be.false;          // 4XX or 5XX",
									"    response.clientError.should.be.false;    // 4XX",
									"    response.serverError.should.be.false;   // 5XX",
									"    response.should.have.status(200);",
									"    response.statusType.should.equal(2);",
									"});",
									"",
									"it('Should return JSON', () => {",
									"    response.should.be.json;",
									"    response.should.have.header('Content-Type', 'application/json');",
									"    response.type.should.equal('application/json');",
									"});",
									"",
									"it('Should contain the un-parsed JSON text', () => {",
									"    response.text.should.be.a('string').with.length.above(10);",
									"});",
									"",
									"it('Should contain the parsed JSON keys', () => {",
									"    response.body.should.be.an('object').with.keys(['nameRequests','response']);",
									"});",
									"//'activeUser', 'names', 'comments', 'expirationDate', 'furnished', 'nrNum', 'priorityCd', 'submittedDate'",
									"",
									"it('Should match against a JSON Schema', () => {",
									"    // For more information about JSON Schema, see https://spacetelescope.github.io/understanding-json-schema/basics.html",
									"    response.body.should.have.schema({",
									"        type: 'object',",
									"        required: ['nameRequests', 'response']",
									"    });",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"it('Should return the required fields in nameRequests', () => {",
									"    var nameRequests = jsonData.nameRequests[0];",
									"    for (var i=0;i<nameRequests.length;i++) {",
									"        nameRequests[i].should.have.schema({",
									"            type: 'object',",
									"            required: ['comments','furnished','lastUpdate','names','natureBusinessInfo','nrNum','nroLastUpdate','priorityCd','requestTypeCd','stateCd','submitCount','submittedDate','xproJurisdiction']",
									"        });",
									"    }",
									"}); ",
									"",
									"describe('All NameRequests should be in \\'CONDITIONAL\\'', () => {",
									"  it('Should check the id property is present', () => {",
									"      for(i=0; i < response.body.nameRequests[0].length; i++) {",
									"          response.body.nameRequests[0][i].should.have.property('stateCd')",
									"          response.body.nameRequests[0][i].stateCd.should.equal('CONDITIONAL')",
									"      }",
									"  })",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/requests?queue=conditional&rows=10",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"requests"
							],
							"query": [
								{
									"key": "queue",
									"value": "conditional"
								},
								{
									"key": "rows",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/requests - queue = APPROVED",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3d818d6a-3381-437f-b613-77ac1a5db3b6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b06ada10-d9a3-403e-83c4-32db3bd7953a",
								"type": "text/javascript",
								"exec": [
									"eval(globals.postmanBDD);",
									"",
									" tests[\"Response time is acceptable\"] = responseTime < 8000;",
									"",
									"",
									"it('Should be an success response', () => {",
									"    response.ok.should.be.true;            // 2XX",
									"    response.error.should.be.false;          // 4XX or 5XX",
									"    response.clientError.should.be.false;    // 4XX",
									"    response.serverError.should.be.false;   // 5XX",
									"    response.should.have.status(200);",
									"    response.statusType.should.equal(2);",
									"});",
									"",
									"it('Should return JSON', () => {",
									"    response.should.be.json;",
									"    response.should.have.header('Content-Type', 'application/json');",
									"    response.type.should.equal('application/json');",
									"});",
									"",
									"it('Should contain the un-parsed JSON text', () => {",
									"    response.text.should.be.a('string').with.length.above(10);",
									"});",
									"",
									"it('Should contain the parsed JSON keys', () => {",
									"    response.body.should.be.an('object').with.keys(['nameRequests','response']);",
									"});",
									"//'activeUser', 'names', 'comments', 'expirationDate', 'furnished', 'nrNum', 'priorityCd', 'submittedDate'",
									"",
									"it('Should match against a JSON Schema', () => {",
									"    // For more information about JSON Schema, see https://spacetelescope.github.io/understanding-json-schema/basics.html",
									"    response.body.should.have.schema({",
									"        type: 'object',",
									"        required: ['nameRequests', 'response']",
									"    });",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"it('Should return the required fields in nameRequests', () => {",
									"    var nameRequests = jsonData.nameRequests[0];",
									"    for (var i=0;i<nameRequests.length;i++) {",
									"        nameRequests[i].should.have.schema({",
									"            type: 'object',",
									"            required: ['comments','furnished','lastUpdate','names','natureBusinessInfo','nrNum','nroLastUpdate','priorityCd','requestTypeCd','stateCd','submitCount','submittedDate','xproJurisdiction']",
									"        });",
									"    }",
									"}); ",
									"",
									"describe('All NameRequests should be in \\'APPROVED\\'', () => {",
									"  it('Should check the id property is present', () => {",
									"      for(i=0; i < response.body.nameRequests[0].length; i++) {",
									"          response.body.nameRequests[0][i].should.have.property('stateCd')",
									"          response.body.nameRequests[0][i].stateCd.should.equal('APPROVED')",
									"      }",
									"  })",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/requests?queue=approved&rows=10",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"requests"
							],
							"query": [
								{
									"key": "queue",
									"value": "approved"
								},
								{
									"key": "rows",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/requests - queue = REJECTED",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3d818d6a-3381-437f-b613-77ac1a5db3b6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "228245f6-48c9-4820-b30d-6c15813aed40",
								"type": "text/javascript",
								"exec": [
									"eval(globals.postmanBDD);",
									"",
									" tests[\"Response time is acceptable\"] = responseTime < 8000;",
									"",
									"",
									"it('Should be an success response', () => {",
									"    response.ok.should.be.true;            // 2XX",
									"    response.error.should.be.false;          // 4XX or 5XX",
									"    response.clientError.should.be.false;    // 4XX",
									"    response.serverError.should.be.false;   // 5XX",
									"    response.should.have.status(200);",
									"    response.statusType.should.equal(2);",
									"});",
									"",
									"it('Should return JSON', () => {",
									"    response.should.be.json;",
									"    response.should.have.header('Content-Type', 'application/json');",
									"    response.type.should.equal('application/json');",
									"});",
									"",
									"it('Should contain the un-parsed JSON text', () => {",
									"    response.text.should.be.a('string').with.length.above(10);",
									"});",
									"",
									"it('Should contain the parsed JSON keys', () => {",
									"    response.body.should.be.an('object').with.keys(['nameRequests','response']);",
									"});",
									"//'activeUser', 'names', 'comments', 'expirationDate', 'furnished', 'nrNum', 'priorityCd', 'submittedDate'",
									"",
									"it('Should match against a JSON Schema', () => {",
									"    // For more information about JSON Schema, see https://spacetelescope.github.io/understanding-json-schema/basics.html",
									"    response.body.should.have.schema({",
									"        type: 'object',",
									"        required: ['nameRequests', 'response']",
									"    });",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"it('Should return the required fields in nameRequests', () => {",
									"    var nameRequests = jsonData.nameRequests[0];",
									"    for (var i=0;i<nameRequests.length;i++) {",
									"        nameRequests[i].should.have.schema({",
									"            type: 'object',",
									"            required: ['comments','furnished','lastUpdate','names','natureBusinessInfo','nrNum','nroLastUpdate','priorityCd','requestTypeCd','stateCd','submitCount','submittedDate','xproJurisdiction']",
									"        });",
									"    }",
									"}); ",
									"",
									"describe('All NameRequests should be in \\'REJECTED\\'', () => {",
									"  it('Should check the id property is present', () => {",
									"      for(i=0; i < response.body.nameRequests[0].length; i++) {",
									"          response.body.nameRequests[0][i].should.have.property('stateCd')",
									"          response.body.nameRequests[0][i].stateCd.should.equal('REJECTED')",
									"      }",
									"  })",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/requests?queue=rejected&rows=10",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"requests"
							],
							"query": [
								{
									"key": "queue",
									"value": "rejected"
								},
								{
									"key": "rows",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/requests - furnished=false",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "828fd0f9-f533-461f-89b5-70f6693436f4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2355404c-83ce-4397-a442-0cecb2f85f58",
								"type": "text/javascript",
								"exec": [
									"eval(globals.postmanBDD);",
									"",
									" tests[\"Response time is acceptable\"] = responseTime < 8000;",
									"",
									"",
									"it('Should be an success response', () => {",
									"    response.ok.should.be.true;            // 2XX",
									"    response.error.should.be.false;          // 4XX or 5XX",
									"    response.clientError.should.be.false;    // 4XX",
									"    response.serverError.should.be.false;   // 5XX",
									"    response.should.have.status(200);",
									"    response.statusType.should.equal(2);",
									"});",
									"",
									"it('Should return JSON', () => {",
									"    response.should.be.json;",
									"    response.should.have.header('Content-Type', 'application/json');",
									"    response.type.should.equal('application/json');",
									"});",
									"",
									"it('Should contain the un-parsed JSON text', () => {",
									"    response.text.should.be.a('string').with.length.above(10);",
									"});",
									"",
									"it('Should contain the parsed JSON keys', () => {",
									"    response.body.should.be.an('object').with.keys(['nameRequests','response']);",
									"});",
									"//'activeUser', 'names', 'comments', 'expirationDate', 'furnished', 'nrNum', 'priorityCd', 'submittedDate'",
									"",
									"it('Should match against a JSON Schema', () => {",
									"    // For more information about JSON Schema, see https://spacetelescope.github.io/understanding-json-schema/basics.html",
									"    response.body.should.have.schema({",
									"        type: 'object',",
									"        required: ['nameRequests', 'response']",
									"    });",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"it('Should return the required fields in nameRequests', () => {",
									"    var nameRequests = jsonData.nameRequests[0];",
									"    for (var i=0;i<nameRequests.length;i++) {",
									"        nameRequests[i].should.have.schema({",
									"            type: 'object',",
									"            required: ['comments','furnished','lastUpdate','names','natureBusinessInfo','nrNum','nroLastUpdate','priorityCd','requestTypeCd','stateCd','submitCount','submittedDate','xproJurisdiction']",
									"        });",
									"    }",
									"}); ",
									"",
									"describe('No NameRequests should be \\'unfurnished\\'', () => {",
									"  it('Should check the id property is present', () => {",
									"      for(i=0; i < response.body.nameRequests[0].length; i++) {",
									"          response.body.nameRequests[0][i].should.have.property('furnished')",
									"          response.body.nameRequests[0][i].furnished.should.equal('N')",
									"      }",
									"  })",
									"})",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/requests?furnished=false&rows=10",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"requests"
							],
							"query": [
								{
									"key": "furnished",
									"value": "false"
								},
								{
									"key": "rows",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/requests - unfurnished=false",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "828fd0f9-f533-461f-89b5-70f6693436f4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "46a38d4c-2d18-4347-b5a3-4963752b6142",
								"type": "text/javascript",
								"exec": [
									"eval(globals.postmanBDD);",
									"",
									" tests[\"Response time is acceptable\"] = responseTime < 8000;",
									"",
									"",
									"it('Should be an success response', () => {",
									"    response.ok.should.be.true;            // 2XX",
									"    response.error.should.be.false;          // 4XX or 5XX",
									"    response.clientError.should.be.false;    // 4XX",
									"    response.serverError.should.be.false;   // 5XX",
									"    response.should.have.status(200);",
									"    response.statusType.should.equal(2);",
									"});",
									"",
									"it('Should return JSON', () => {",
									"    response.should.be.json;",
									"    response.should.have.header('Content-Type', 'application/json');",
									"    response.type.should.equal('application/json');",
									"});",
									"",
									"it('Should contain the un-parsed JSON text', () => {",
									"    response.text.should.be.a('string').with.length.above(10);",
									"});",
									"",
									"it('Should contain the parsed JSON keys', () => {",
									"    response.body.should.be.an('object').with.keys(['nameRequests','response']);",
									"});",
									"//'activeUser', 'names', 'comments', 'expirationDate', 'furnished', 'nrNum', 'priorityCd', 'submittedDate'",
									"",
									"it('Should match against a JSON Schema', () => {",
									"    // For more information about JSON Schema, see https://spacetelescope.github.io/understanding-json-schema/basics.html",
									"    response.body.should.have.schema({",
									"        type: 'object',",
									"        required: ['nameRequests', 'response']",
									"    });",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"it('Should return the required fields in nameRequests', () => {",
									"    var nameRequests = jsonData.nameRequests[0];",
									"    for (var i=0;i<nameRequests.length;i++) {",
									"        nameRequests[i].should.have.schema({",
									"            type: 'object',",
									"            required: ['comments','furnished','lastUpdate','names','natureBusinessInfo','nrNum','nroLastUpdate','priorityCd','requestTypeCd','stateCd','submitCount','submittedDate','xproJurisdiction']",
									"        });",
									"    }",
									"}); ",
									"",
									"describe('No NameRequests should be \\'unfurnished\\'', () => {",
									"  it('Should check the id property is present', () => {",
									"      for(i=0; i < response.body.nameRequests[0].length; i++) {",
									"          response.body.nameRequests[0][i].should.have.property('furnished')",
									"          response.body.nameRequests[0][i].furnished.should.equal('Y')",
									"      }",
									"  })",
									"})",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/requests?unfurnished=false&rows=10",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"requests"
							],
							"query": [
								{
									"key": "unfurnished",
									"value": "false"
								},
								{
									"key": "rows",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/requests - PriorityCd:desc & submitDate:asc",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "82edf8a1-3195-466d-9af3-12bd5b558902",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "23939174-235b-474c-a80f-f03aecbac9f3",
								"type": "text/javascript",
								"exec": [
									"eval(globals.postmanBDD);",
									"",
									" tests[\"Response time is acceptable\"] = responseTime < 8000;",
									"",
									"",
									"it('should be an success response', () => {",
									"    response.ok.should.be.true;            // 2XX",
									"    response.error.should.be.false;          // 4XX or 5XX",
									"    response.clientError.should.be.false;    // 4XX",
									"    response.serverError.should.be.false;   // 5XX",
									"    response.should.have.status(200);",
									"    response.statusType.should.equal(2);",
									"});",
									"",
									"it('should return JSON', () => {",
									"    response.should.be.json;",
									"    response.should.have.header('Content-Type', 'application/json');",
									"    response.type.should.equal('application/json');",
									"});",
									"",
									"it('should contain the un-parsed JSON text', () => {",
									"    response.text.should.be.a('string').with.length.above(10);",
									"});",
									"",
									"it('should contain the parsed JSON keys', () => {",
									"    response.body.should.be.an('object').with.keys(['nameRequests','response']);",
									"});",
									"//'activeUser', 'names', 'comments', 'expirationDate', 'furnished', 'nrNum', 'priorityCd', 'submittedDate'",
									"",
									"it('should match against a JSON Schema', () => {",
									"    // For more information about JSON Schema, see https://spacetelescope.github.io/understanding-json-schema/basics.html",
									"    response.body.should.have.schema({",
									"        type: 'object',",
									"        required: ['nameRequests', 'response']",
									"    });",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"it('Should return the required fields in nameRequests', () => {",
									"    var nameRequests = jsonData.nameRequests[0];",
									"    for (var i=0;i<nameRequests.length;i++) {",
									"        nameRequests[i].should.have.schema({",
									"            type: 'object',",
									"            required: ['comments','furnished','lastUpdate','names','nrNum','nroLastUpdate','priorityCd','requestTypeCd','stateCd','submitCount','submittedDate','xproJurisdiction']",
									"        });",
									"    }",
									"}); ",
									"  ",
									"describe('NameRequests should have PriorityCD=Y first', () => {",
									"  var seenIt='Y'",
									"  it('should check that all Priority codes are first', () => {",
									"      for(i=0; i < response.body.nameRequests[0].length; i++) {",
									"          if (response.body.nameRequests[0][i].priorityCd != 'Y'){",
									"              if (seenIt == 'Y'){ seenIt = 'N' }",
									"          }",
									"          if (seenIt == 'Y'){",
									"              response.body.nameRequests[0][i].priorityCd.should.equal('Y')",
									"          } else {",
									"              response.body.nameRequests[0][i].priorityCd.should.equal('N')",
									"          }",
									"      }",
									"  })",
									"})"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/requests?order=priorityCd:desc,submittedDate:asc",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"requests"
							],
							"query": [
								{
									"key": "order",
									"value": "priorityCd:desc,submittedDate:asc"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}