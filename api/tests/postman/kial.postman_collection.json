{
	"info": {
		"_postman_id": "5ccb7b79-5caf-4718-b6cf-91a49d92bf75",
		"name": "namex-kial",
		"description": "# Introduction\nWhat does your API do?\n\n# Overview\nThings that the developers should know about\n\n# Authentication\nWhat is the preferred way of using the API?\n\n# Error Codes\nWhat errors and status codes can a user expect?\n\n# Rate limit\nIs there a limit to the number of requests an user can send?",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "setup",
			"description": null,
			"item": [
				{
					"name": "Install Postman BDD Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// If the \"postman_bdd_path\" environment variable is set, then we'll use it.",
									"// Otherwise, we'll default to the published version",
									"if (!environment.postman_bdd_path) {",
									"    postman.setGlobalVariable('postman_bdd_path', 'http://bigstickcarpet.com/postman-bdd/dist/postman-bdd.min.js');",
									"}",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// \"install\" Postman BDD",
									"postman.setGlobalVariable('postmanBDD', responseBody);",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-cache"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{postman_bdd_path}}",
							"host": [
								"{{postman_bdd_path}}"
							]
						},
						"description": "This request downloads [Postman BDD](https://github.com/BigstickCarpet/postman-bdd) and then \"installs\" it by setting a global variable\n"
					},
					"response": []
				},
				{
					"name": "Install auth_token_script",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d682c68b-25da-42f8-a3c0-b524eaebdbac",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "968eeea1-e843-4f57-94c5-3fa1db5e7a50",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"auth_token_script\", jsonData.data);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "authurl = pm.environment.get(\"authurl\");\nrealm = pm.environment.get(\"realm\");\nclientid = pm.environment.get(\"clientid\");\nuserid = pm.environment.get(\"userid\");\npassword = pm.environment.get(\"password\");\nclient_secret = pm.environment.get(\"client_secret\");\n\nconst echoPostRequest = {\n  url: authurl +'/auth/realms/' +realm + '/protocol/openid-connect/token',\n  method: 'POST',\n  header: 'Content-Type:application/x-www-form-urlencoded',\n  body: {\n    mode: 'raw',\n    raw: 'grant_type=password&client_id=' \n         +clientid \n         +'&username=' \n         +userid \n         +'&password='\n         +password\n         +'&client_secret='\n         +client_secret\n  }\n};\npm.sendRequest(echoPostRequest, function (err, res) {\n    if (err) { console.log(err); }\n    else{\n      var jsonData = res.json();\n      pm.environment.set(\"token\", jsonData.access_token);\n      pm.environment.set(\"refresh_token\", jsonData.refresh_token);\n      pm.environment.set(\"token_expires\", Date.now()+(jsonData.expires_in * 1000));\n      pm.environment.set(\"refresh_token_expires\", Date.now()+(jsonData.refresh_expires_in * 1000));\n    }\n    //console.log(err ? err : res.json());\n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						}
					},
					"response": []
				},
				{
					"name": "Install auth_refresh_script",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d682c68b-25da-42f8-a3c0-b524eaebdbac",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e746bda3-1345-4ecc-956c-ec47cab5c4eb",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"auth_refresh_script\", jsonData.data);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "authurl = pm.environment.get(\"authurl\");\nrealm = pm.environment.get(\"realm\");\nclientid = pm.environment.get(\"clientid\");\nrefresh_token = pm.environment.get(\"refresh_token\");\nclient_secret = pm.environment.get(\"client_secret\");\n\nconst echoPostRequest = {\n  url: authurl +'/auth/realms/' +realm + '/protocol/openid-connect/token',\n  method: 'POST',\n  header: 'Content-Type:application/x-www-form-urlencoded',\n  body: {\n    mode: 'raw',\n    raw: 'grant_type=refresh_token&client_id=' \n         +clientid \n         +'&refresh_token=' \n         +refresh_token \n         +'&client_secret='\n         +client_secret\n  }\n};\npm.sendRequest(echoPostRequest, function (err, res) {\n    var jsonData = res.json();\n    pm.environment.set(\"token\", jsonData.access_token);\n    pm.environment.set(\"refresh_token\", jsonData.refresh_token);\n    pm.environment.set(\"token_expires\", Date.now()+(jsonData.expires_in * 1000));\n    pm.environment.set(\"refresh_token_expires\", Date.now()+(jsonData.refresh_expires_in * 1000));\n\n    console.log(err ? err : res.json());\n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						}
					},
					"response": []
				},
				{
					"name": "authenticate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8dc7d45a-d0cf-46c4-9619-8e9d9e88de38",
								"type": "text/javascript",
								"exec": [
									"authurl = pm.environment.get(\"authurl\");",
									"realm = pm.environment.get(\"realm\");",
									"clientid = pm.environment.get(\"clientid\");",
									"userid = pm.environment.get(\"userid\");",
									"password = pm.environment.get(\"password\");",
									"client_secret = pm.environment.get(\"client_secret\");",
									"",
									"var timeNow;",
									"",
									"pm.sendRequest('https://postman-echo.com/time/now', function (err, res) {",
									"    if (err) { console.log(err); }",
									"    else {",
									"        var currentTime = res.stream.toString();",
									"        console.log(currentTime);",
									"        pm.environment.set(\"currentTime\", currentTime);",
									"        timeNow = Date(currentTime)",
									"    }",
									"});",
									"",
									"const echoPostRequest = {",
									"  url: authurl +'/auth/realms/' +realm + '/protocol/openid-connect/token',",
									"  method: 'POST',",
									"  header: 'Content-Type:application/x-www-form-urlencoded',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: 'grant_type=password&client_id=' ",
									"         +clientid ",
									"         +'&username=' ",
									"         +userid ",
									"         +'&password='",
									"         +password",
									"         +'&client_secret='",
									"         +client_secret",
									"  }",
									"};",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"    var jsonData = res.json();",
									"    pm.environment.set(\"token\", jsonData.access_token);",
									"    pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
									"    console.log(err ? err : res.json());",
									"});",
									"",
									"console.log('time to run '+ (Date.now()-Date.parse(environment.currentTime)))"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d165a3e6-e32a-498e-b653-a4d959e5dda1",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"auth_script\", jsonData.data);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "authurl = pm.environment.get(\"authurl\");\nrealm = pm.environment.get(\"realm\");\nclientid = pm.environment.get(\"clientid\");\nuserid = pm.environment.get(\"userid\");\npassword = pm.environment.get(\"password\");\nclient_secret = pm.environment.get(\"client_secret\");\n\nconst echoPostRequest = {\n  url: authurl +'/auth/realms/' +realm + '/protocol/openid-connect/token',\n  method: 'POST',\n  header: 'Content-Type:application/x-www-form-urlencoded',\n  body: {\n    mode: 'raw',\n    raw: 'grant_type=password&client_id=' \n         +clientid \n         +'&username=' \n         +userid \n         +'&password='\n         +password\n         +'&client_secret='\n         +client_secret\n  }\n};\npm.sendRequest(echoPostRequest, function (err, res) {\n    var jsonData = res.json();\n    pm.environment.set(\"token\", jsonData.access_token);\n    pm.environment.set(\"refresh_token\", jsonData.refresh_token);\n    console.log(err ? err : res.json());\n});"
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "analysis",
			"description": null,
			"item": [
				{
					"name": "conflicts",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "75b64372-8d70-4773-9e21-5d72f5cfba27",
								"type": "text/javascript",
								"exec": [
									"eval(environment.auth_script);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4b2f1d65-e3df-4748-bb48-fbccfdf31ebd",
								"type": "text/javascript",
								"exec": [
									"eval(globals.postmanBDD);",
									"",
									"it('should be an success response', () => {",
									"    response.ok.should.be.true;            // 2XX",
									"    response.error.should.be.false;          // 4XX or 5XX",
									"    response.clientError.should.be.false;    // 4XX",
									"    response.serverError.should.be.false;   // 5XX",
									"    response.should.have.status(200);",
									"    response.statusType.should.equal(2);",
									"});",
									"",
									"it('should return JSON', () => {",
									"    response.should.be.json;",
									"    response.should.have.header('Content-Type', 'application/json');",
									"    response.type.should.equal('application/json');",
									"});",
									"",
									"it('should contain the un-parsed JSON text', () => {",
									"    response.text.should.be.a('string').with.length.above(10);",
									"});",
									"",
									"it('should contain the parsed JSON keys', () => {",
									"    response.body.should.be.an('object').with.keys(['highlighting', 'names', 'response']);",
									"});",
									"",
									"it('should match against a JSON Schema', () => {",
									"    // For more information about JSON Schema, see https://spacetelescope.github.io/understanding-json-schema/basics.html",
									"    response.body.should.have.schema({",
									"        type: 'object',",
									"        required: ['names', 'highlighting', 'response']",
									"    });",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/requests/NR 0000021/analysis/1/conflicts?start=3&rows=35",
							"host": [
								"{{url}}"
							],
							"path": [
								"requests",
								"NR 0000021",
								"analysis",
								"1",
								"conflicts"
							],
							"query": [
								{
									"key": "start",
									"value": "3"
								},
								{
									"key": "rows",
									"value": "35"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "histories",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "75b64372-8d70-4773-9e21-5d72f5cfba27",
								"type": "text/javascript",
								"exec": [
									"eval(environment.auth_script);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1002b5c6-9f49-49e9-8884-0e72466e7481",
								"type": "text/javascript",
								"exec": [
									"eval(globals.postmanBDD);",
									"",
									"it('should be an success response', () => {",
									"    response.ok.should.be.true;            // 2XX",
									"    response.error.should.be.false;          // 4XX or 5XX",
									"    response.clientError.should.be.false;    // 4XX",
									"    response.serverError.should.be.false;   // 5XX",
									"    response.should.have.status(200);",
									"    response.statusType.should.equal(2);",
									"});",
									"",
									"it('should return JSON', () => {",
									"    response.should.be.json;",
									"    response.should.have.header('Content-Type', 'application/json');",
									"    response.type.should.equal('application/json');",
									"});",
									"",
									"it('should contain the un-parsed JSON text', () => {",
									"    response.text.should.be.a('string').with.length.above(10);",
									"});",
									"",
									"it('should contain the parsed JSON keys', () => {",
									"    response.body.should.be.an('object').with.keys(['highlighting', 'names', 'response']);",
									"});",
									"",
									"it('should match against a JSON Schema', () => {",
									"    // For more information about JSON Schema, see https://spacetelescope.github.io/understanding-json-schema/basics.html",
									"    response.body.should.have.schema({",
									"        type: 'object',",
									"        required: ['names', 'highlighting', 'response']",
									"    });",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/requests/NR 0000021/analysis/1/histories?start=1&rows=32",
							"host": [
								"{{url}}"
							],
							"path": [
								"requests",
								"NR 0000021",
								"analysis",
								"1",
								"histories"
							],
							"query": [
								{
									"key": "start",
									"value": "1"
								},
								{
									"key": "rows",
									"value": "32"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "trademarks",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "75b64372-8d70-4773-9e21-5d72f5cfba27",
								"type": "text/javascript",
								"exec": [
									"eval(environment.auth_script);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cf6fa36e-812c-4b39-a907-0dd59d99d5cf",
								"type": "text/javascript",
								"exec": [
									"eval(globals.postmanBDD);",
									"",
									"it('should be an success response', () => {",
									"    response.ok.should.be.true;            // 2XX",
									"    response.error.should.be.false;          // 4XX or 5XX",
									"    response.clientError.should.be.false;    // 4XX",
									"    response.serverError.should.be.false;   // 5XX",
									"    response.should.have.status(200);",
									"    response.statusType.should.equal(2);",
									"});",
									"",
									"it('should return JSON', () => {",
									"    response.should.be.json;",
									"    response.should.have.header('Content-Type', 'application/json');",
									"    response.type.should.equal('application/json');",
									"});",
									"",
									"it('should contain the un-parsed JSON text', () => {",
									"    response.text.should.be.a('string').with.length.above(10);",
									"});",
									"",
									"it('should contain the parsed JSON keys', () => {",
									"    response.body.should.be.an('object').with.keys(['highlighting', 'names', 'response']);",
									"});",
									"",
									"it('should match against a JSON Schema', () => {",
									"    // For more information about JSON Schema, see https://spacetelescope.github.io/understanding-json-schema/basics.html",
									"    response.body.should.have.schema({",
									"        type: 'object',",
									"        required: ['names', 'highlighting', 'response']",
									"    });",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/requests/NR 0000021/analysis/1/trademarks?start=1&rows=32",
							"host": [
								"{{url}}"
							],
							"path": [
								"requests",
								"NR 0000021",
								"analysis",
								"1",
								"trademarks"
							],
							"query": [
								{
									"key": "start",
									"value": "1"
								},
								{
									"key": "rows",
									"value": "32"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "restricted_words",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "75b64372-8d70-4773-9e21-5d72f5cfba27",
								"type": "text/javascript",
								"exec": [
									"eval(environment.auth_script);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "143548f1-a282-43b7-9ecc-6c0c7ee24b32",
								"type": "text/javascript",
								"exec": [
									"eval(globals.postmanBDD);",
									"",
									"it('should be an success response', () => {",
									"    response.ok.should.be.true;            // 2XX",
									"    response.error.should.be.false;          // 4XX or 5XX",
									"    response.clientError.should.be.false;    // 4XX",
									"    response.serverError.should.be.false;   // 5XX",
									"    response.should.have.status(200);",
									"    response.statusType.should.equal(2);",
									"});",
									"",
									"it('should return JSON', () => {",
									"    response.should.be.json;",
									"    response.should.have.header('Content-Type', 'application/json');",
									"    response.type.should.equal('application/json');",
									"});",
									"",
									"it('should contain the un-parsed JSON text', () => {",
									"    response.text.should.be.a('string').with.length.above(10);",
									"});",
									"",
									"it('should contain the parsed JSON keys', () => {",
									"    response.body.should.be.an('object').with.keys(['restricted_words_conditions']);",
									"});",
									"",
									"it('should match against a JSON Schema', () => {",
									"    // For more information about JSON Schema, see https://spacetelescope.github.io/understanding-json-schema/basics.html",
									"    response.body.should.have.schema({",
									"        type: 'object',",
									"        required: ['restricted_words_conditions']",
									"    });",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/requests/NR 8270105/analysis/3/restricted_words",
							"host": [
								"{{url}}"
							],
							"path": [
								"requests",
								"NR 8270105",
								"analysis",
								"3",
								"restricted_words"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "authenticate",
			"description": null,
			"item": [
				{
					"name": "authenticate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c6720c75-f388-4f9a-a157-c4b4b560a99f",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"token\", jsonData.access_token);",
									"pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
									"",
									"pm.environment.set(\"token_expires\", Date.now()+(jsonData.expires_in * 1000));",
									"pm.environment.set(\"refresh_token_expires\", Date.now()+(jsonData.refresh_expires_in * 1000));",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "grant_type=password&client_id={{clientid}}&username={{userid}}&password={{password}}&client_secret={{client_secret}}"
						},
						"url": {
							"raw": "{{authurl}}/auth/realms/{{realm}}/protocol/openid-connect/token",
							"host": [
								"{{authurl}}"
							],
							"path": [
								"auth",
								"realms",
								"{{realm}}",
								"protocol",
								"openid-connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "authentication-refresh",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ef30827-b3d6-4518-8dc5-afdc26a7681e",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"token\", jsonData.access_token);",
									"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "grant_type=refresh_token&client_id={{clientid}}&refresh_token={{refresh_token}}&client_secret={{client_secret}}"
						},
						"url": {
							"raw": "{{authurl}}/auth/realms/{{realm}}/protocol/openid-connect/token",
							"host": [
								"{{authurl}}"
							],
							"path": [
								"auth",
								"realms",
								"{{realm}}",
								"protocol",
								"openid-connect",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "names",
			"description": null,
			"item": [
				{
					"name": "/requests/NR 0000021/names/1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "271acb63-04ef-4966-9148-e887f34de1b4",
								"type": "text/javascript",
								"exec": [
									"eval(environment.auth_script);",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/requests/NR 0000021/names/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"requests",
								"NR 0000021",
								"names",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "requests/NR 0000021/names/1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "30983378-b8a6-4dd6-b670-3edb316f5a99",
								"type": "text/javascript",
								"exec": [
									"eval(environment.auth_script);",
									""
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"state\": \"APPROVED\"}"
						},
						"url": {
							"raw": "{{url}}/api/v1/requests/NR 0000021/names/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"requests",
								"NR 0000021",
								"names",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "requests/NR 0000021/names/1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "30983378-b8a6-4dd6-b670-3edb316f5a99",
								"type": "text/javascript",
								"exec": [
									"eval(environment.auth_script);",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"state\": \"NE\", \"choice\": 1, \"name\": \"my good company\", \"consumptionDate\": null, \"designation\": null}"
						},
						"url": {
							"raw": "{{url}}/api/v1/requests/NR 0000021/names/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"requests",
								"NR 0000021",
								"names",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ops",
			"description": null,
			"item": [
				{
					"name": "healthz",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2b3cd3b3-dec2-4b39-81c9-e406b63793ac",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"api is healthy\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql('api is healthy');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/healthz",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"healthz"
							]
						}
					},
					"response": []
				},
				{
					"name": "readyz",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ceec5748-a38a-4b7d-afab-ae773e30484e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"api is healthy\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql('api is ready');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/readyz",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"readyz"
							]
						}
					},
					"response": []
				},
				{
					"name": "echo",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d5d580c0-13ec-419c-93e0-54d3e2b74a6e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"token includes key:preferred_username\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('preferred_username');",
									"});",
									"",
									"pm.test(\"token includes key:roles\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.realm_access).to.have.property('roles');",
									"});",
									"",
									"pm.test(\"token typ:Bearer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.typ).to.eql(\"Bearer\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0e083fef-81cc-467a-a931-a2ef47d74735",
								"type": "text/javascript",
								"exec": [
									"eval(environment.auth_script);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/echo",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"echo"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "requests/queues/@me/oldest",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b8a40ff8-2595-44e3-afb6-843b0e676cba",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"if (typeof jsonData.nameRequest !== 'undefined' || jsonData.nameRequest !== null) {",
							"   pm.environment.set(\"queued_nr\", jsonData.nameRequest);",
							"}else{",
							"   pm.environment.unset(\"queued_nr\");    ",
							"}",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b5cb22c0-4abb-412e-9044-3907840fb485",
						"type": "text/javascript",
						"exec": [
							"eval(environment.auth_script);"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/api/v1/requests/queues/@me/oldest",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"v1",
						"requests",
						"queues",
						"@me",
						"oldest"
					]
				}
			},
			"response": []
		},
		{
			"name": "requests/queues/@me/oldest getsame again",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "10fb8743-f67b-4540-a06a-391055527a04",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Same value as previous get from queue\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.nameRequest).to.eql( pm.environment.get(\"queued_nr\"));",
							"});",
							"",
							"pm.environment.unset(\"queued_nr\");  ",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/api/v1/requests/queues/@me/oldest",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"v1",
						"requests",
						"queues",
						"@me",
						"oldest"
					]
				}
			},
			"response": []
		},
		{
			"name": "requests/NR00000021",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "271acb63-04ef-4966-9148-e887f34de1b4",
						"type": "text/javascript",
						"exec": [
							"eval(environment.auth_script);",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "be255a56-98e4-4de6-ba27-e77d9f85e46b",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/api/v1/requests/NR 0000021",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"v1",
						"requests",
						"NR 0000021"
					]
				}
			},
			"response": []
		},
		{
			"name": "requests/NR00000001",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "30983378-b8a6-4dd6-b670-3edb316f5a99",
						"type": "text/javascript",
						"exec": [
							"eval(environment.auth_script);",
							""
						]
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"state\": \"INPROGRESS\"}"
				},
				"url": {
					"raw": "{{url}}/api/v1/requests/NR00000023",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"v1",
						"requests",
						"NR00000023"
					]
				}
			},
			"response": []
		},
		{
			"name": "/requests - create 007",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "content-type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"submitter\": \"thor\",\n\t\"corpType\": \"INC\",\n\t\"reqType\": \"NEW\"\n}"
				},
				"url": {
					"raw": "{{url}}/api/v1/requests",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"v1",
						"requests"
					]
				}
			},
			"response": []
		},
		{
			"name": "/requests - put NR00000001",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "content-type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"abPartner\": \"ab_partner\",\n    \"additionalInfo\": null,\n    \"adminComment\": null,\n    \"applicant\": \"New CEO\",\n    \"assumedNuansExpirationDate\": null,\n    \"assumedNuansName\": null,\n    \"assumedNuansNum\": null,\n    \"consentFlag\": null,\n    \"contact\": \"Contact\",\n    \"examComment\": null,\n    \"expiryDate\": null,\n    \"id\": 1,\n    \"lastNuansUpdateRole\": null,\n    \"lastUpdate\": \"Mon, 02 Apr 2018 20:09:03 GMT\",\n    \"names\": [\n        {\n            \"choice\": 1,\n            \"consumptionDate\": null,\n            \"name\": \"my good company\",\n            \"state\": \"DRAFT\"\n        }\n        ],\n    \"natureBusinessInfo\": \"fire hydrants manufacture\",\n    \"nrNum\": \"NR00000001\",\n    \"nuansExpirationDate\": null,\n    \"nuansNum\": null,\n    \"phoneNumber\": \"2501112222\",\n    \"priorityCd\": null,\n    \"requestId\": null,\n    \"requestTypeCd\": null,\n    \"skPartner\": \"sk_partner\",\n    \"state\": \"HOLD\",\n    \"tilmaInd\": null,\n    \"tilmaTransactionId\": null,\n    \"timestamp\": \"Mon, 02 Apr 2018 20:09:03 GMT\",\n    \"userId\": 1,\n    \"userNote\": null,\n    \"xproJurisdiction\": null\n}"
				},
				"url": {
					"raw": "{{url}}/api/v1/requests/NR00000002",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"v1",
						"requests",
						"NR00000002"
					]
				}
			},
			"response": []
		},
		{
			"name": "/requests/<string:nr> nr==NR00000002",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "54db63b7-4bf8-440a-bfaf-62b2c093bbac",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 204 - Deleted\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "content-type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/api/v1/requests/NR00000002",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"v1",
						"requests",
						"NR00000002"
					]
				}
			},
			"response": []
		},
		{
			"name": "/requests/<string:nr> nr==NR00000002 should fail, but still send 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "54db63b7-4bf8-440a-bfaf-62b2c093bbac",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 204 - Deleted\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "content-type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/api/v1/requests/NR",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"v1",
						"requests",
						"NR"
					]
				}
			},
			"response": []
		}
	]
}