#!/usr/bin/env groovy
// Copyright Â© 2018 Province of British Columbia
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

//JENKINS DEPLOY ENVIRONMENT VARIABLES:
// - JENKINS_JAVA_OVERRIDES  -Dhudson.model.DirectoryBrowserSupport.CSP= -Duser.timezone=America/Vancouver
//   -> user.timezone : set the local timezone so logfiles report correxct time
//   -> hudson.model.DirectoryBrowserSupport.CSP : removes restrictions on CSS file load, thus html pages of test reports are displayed pretty
//   See: https://docs.openshift.com/container-platform/3.9/using_images/other_images/jenkins.html for a complete list of JENKINS env vars

// define constants
def BUILDCFG_BASE ='namex-api-base'
def IMAGE_BASE_NAME = 'namex-api-base'

def BUILDCFG_RUNTIME ='namex-api-runtime'
def IMAGE_RUNTIME_NAME = 'namex-api-runtime'

def DEV_DEPLOYMENT_NAME = 'namex-api'
def DEV_TAG_NAME = 'dev'
def DEV_NS = 'servicebc-ne-dev'

def TST_DEPLOYMENT_NAME = 'namex-api'
def TST_TAG_NAME = 'test'
def TST_BCK_TAG_NAME = 'test-previous'
def TST_NS = 'servicebc-ne-test'

def PROD_DEPLOYMENT_NAME = 'namex-api'
def PROD_TAG_NAME = 'prod'
def PROD_BCK_TAG_NAME = 'prod-previous'
def PROD_NS = 'servicebc-ne-prod'

// Edit your application's context directory here
def CONTEXT_DIRECTORY = 'api'

def GIT_BRANCH_NAME = ("${env.JOB_BASE_NAME}".contains("master")) ? "master" : "develop"
def JENKINS_ICO = 'https://wiki.jenkins-ci.org/download/attachments/2916393/logo.png'
def OPENSHIFT_ICO = 'https://commons.wikimedia.org/wiki/File:OpenShift-LogoType.svg'

// define groovy functions
import groovy.json.JsonOutput

// send a msg to slack channel that deploy occured
def notifySlack(text, channel, url, attachments) {
    def slackURL = url
    def jenkinsIcon = 'https://wiki.jenkins-ci.org/download/attachments/2916393/logo.png'
    def payload = JsonOutput.toJson([text: text,
        channel: channel,
        username: "Jenkins",
        icon_url: jenkinsIcon,
        attachments: attachments
    ])
    def encodedReq = URLEncoder.encode(payload, "UTF-8")
    sh("curl -s -S -X POST " +
            "--data \'payload=${encodedReq}\' ${slackURL}")
}

// Determine whether there were any changes the files within the project's context directory.
// return a string listing commit msgs occurred since last build
@NonCPS
String triggerBuild(String contextDirectory) {
    // Determine if code has changed within the source context directory.
    def changeLogSets = currentBuild.changeSets
    def filesChangeCnt = 0
    MAX_MSG_LEN = 512
    def changeString = ""
    for (int i = 0; i < changeLogSets.size(); i++) {
        def entries = changeLogSets[i].items
        for (int j = 0; j < entries.length; j++) {
            def entry = entries[j]
            //echo "${entry.commitId} by ${entry.author} on ${new Date(entry.timestamp)}: ${entry.msg}"
            def files = new ArrayList(entry.affectedFiles)

            for (int k = 0; k < files.size(); k++) {
                def file = files[k]
                def filePath = file.path
                //echo ">> ${file.path}"
                if (filePath.contains(contextDirectory)) {

                    filesChangeCnt = 1
                    truncated_msg = entry.msg.take(MAX_MSG_LEN)
                    changeString += " - ${truncated_msg} [${entry.author}]\n"
                    k = files.size()
                    j = entries.length
                }
            }
        }
    }
    if ( filesChangeCnt < 1 ) {
        echo('The changes do not require a build.')
        return ""
    }
    else {
        echo('The changes require a build.')
        return changeString
    }
}

// pipeline

// Note: openshiftVerifyDeploy requires policy to be added:
// oc policy add-role-to-user view system:serviceaccount:devex-platform-tools:jenkins -n devex-platform-dev
// oc policy add-role-to-user view system:serviceaccount:devex-platform-tools:jenkins -n devex-platform-test
// oc policy add-role-to-user view system:serviceaccount:devex-platform-tools:jenkins -n devex-platform-prod

// define job properties - keep 10 builds only
properties([[$class: 'BuildDiscarderProperty', strategy: [$class: 'LogRotator', artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10']]])

def run_pipeline = true
if( triggerBuild(CONTEXT_DIRECTORY) == "" ) {
    node {
        SLACK_TOKEN = sh (
                    script: """oc get secret/slack -o template --template="{{.data.token}}" | base64 --decode""",
                        returnStdout: true).trim()

        // send msg to slack
        def attachment = [:]
        attachment.fallback = "See build log for more details"
        attachment.title = "NAMEX-API Build ${BUILD_ID} has no changes"
        attachment.color = "#00FF00" // Lime Green
        attachment.text = "Proceed anyways?" //+ "\nCommit ${GIT_COMMIT_SHORT_HASH} by ${GIT_COMMIT_AUTHOR}"
        def decision = [:]
        decision.type = "button"
        decision.text = "Proceed/Abort?"
        decision.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-namex-api-pipeline/${BUILD_ID}/input"
        decision.short = false
        attachment.actions = [decision]
        notifySlack("namex-api-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
    }
    try {
        timeout(time: 1, unit: 'DAYS') {
            input message: "Run namex-api-pipeline?", id: "1234", submitter: 'admin,ljtrent-admin,thorwolpert-admin,rarmitag-admin,kialj876-edit'
        }
    } catch (Exception e) {
        run_pipeline = false;
    }

}

if (!run_pipeline)
    // The changeSets did not contain any changes within the project's context directory.
    // Clearly indicate there were no changes.
    stage('No Changes') {
        node {
            SLACK_TOKEN = sh (
                    script: """oc get secret/slack -o template --template="{{.data.token}}" | base64 --decode""",
                        returnStdout: true).trim()

            // send msg to slack
            def attachment = [:]
            attachment.fallback = "See build log for more details"
            attachment.title = "NAMEX-API Build {$BUILD_ID} prevented because there were no changes"
            attachment.color = "#00FF00" // Lime Green
            attachment.text = "No changes applied to namex-api" //+ "\nCommit ${GIT_COMMIT_SHORT_HASH} by ${GIT_COMMIT_AUTHOR}"
            notifySlack("namex-api-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])

            currentBuild.result = 'SUCCESS'
        }
    }
} else {
    //node/pod needs environment setup for testing
    def py3njs_label = "jenkins-py3nodejs-${UUID.randomUUID().toString()}"
    podTemplate(label: py3njs_label, name: py3njs_label, serviceAccount: 'jenkins', cloud: 'openshift', containers: [
        containerTemplate(
            name: 'jnlp',
            image: '172.50.0.2:5000/openshift/jenkins-slave-py3nodejs',
            resourceRequestCpu: '500m',
            resourceLimitCpu: '1000m',
            resourceRequestMemory: '1Gi',
            resourceLimitMemory: '2Gi',
            workingDir: '/tmp',
            command: '',
            args: '${computer.jnlpmac} ${computer.name}',
            envVars: [
                envVar(key:'DATABASE_TEST_HOST', value: "postgresql-test"),
                envVar(key:'DATABASE_TEST_PORT', value: "5432"),
                secretEnvVar(key: 'DATABASE_TEST_USERNAME', secretName: 'postgresql-test', secretKey: 'database-user'),
                secretEnvVar(key: 'DATABASE_TEST_PASSWORD', secretName: 'postgresql-test', secretKey: 'database-password'),
                secretEnvVar(key: 'DATABASE_TEST_NAME', secretName: 'postgresql-test', secretKey: 'database-name'),
                secretEnvVar(key: 'JWT_OIDC_WELL_KNOWN_CONFIG', secretName: 'namex-keycloak-secrets', secretKey: 'JWT_OIDC_WELL_KNOWN_CONFIG'),
                secretEnvVar(key: 'JWT_OIDC_ALGORITHMS', secretName: 'namex-keycloak-secrets', secretKey: 'JWT_OIDC_ALGORITHMS'),
                secretEnvVar(key: 'JWT_OIDC_AUDIENCE', secretName: 'namex-keycloak-secrets', secretKey: 'JWT_OIDC_AUDIENCE'),
                secretEnvVar(key: 'JWT_OIDC_CLIENT_SECRET', secretName: 'namex-keycloak-secrets', secretKey: 'JWT_OIDC_CLIENT_SECRET')
           ]
        )
    ])
    {
    node (py3njs_label){
        SLACK_TOKEN = sh (
                script: """oc get secret/slack -o template --template="{{.data.token}}" | base64 --decode""",
                    returnStdout: true).trim()

        // send msg to slack
        def attachment = [:]
        attachment.fallback = "See build log for more details"
        attachment.title = "NAMEX-API pipeline executing..."
        attachment.color = "#00FF00" // Lime Green
        notifySlack("namex-api-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])

        // Part 1 - CI - Source code scanning, build, dev deploy

        stage('Checkout') {
            try {
                echo "checking out source"
                echo "Build: ${BUILD_ID}"
                checkout scm
                GIT_COMMIT_SHORT_HASH = sh (
                        script: """git describe --always""", returnStdout: true
                    ).trim()
                GIT_COMMIT_AUTHOR = sh (
                        script: """git show -s --pretty=%an""", returnStdout: true
                    ).trim()

            } catch (Exception e) {
                echo "error during checkout: ${e}"
                // send msg to slack
                attachment = [:]
                attachment.fallback = "See build log for more details"
                attachment.title = "NAMEX-API failed to CHECKOUT :fire:"
                attachment.color = "danger" // red
                def logs = [:]
                logs.type = "button"
                logs.text = "Build Log"
                logs.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-namex-api-pipeline/${BUILD_ID}/console"
                logs.short = false
                attachment.actions = [logs]
                notifySlack("namex-api-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
                error('Aborted')
            }
            stage ('local pytest'){
                echo "Testing build: ${BUILD_ID}"
                echo "Running tests "
                try {
                    sh '''
                         cd api
                         pip install pip --upgrade
                         pip install -r requirements/dev.txt
                         pytest --junitxml=pytest_report.xml
                    '''
                    junit 'api/pytest_report.xml'
                    stash includes: 'api/pytest_report.xml', name: 'namex-pytests'

                } catch (Exception e) {
                    echo "EXCEPTION: ${e}"

                    //send msg to slack
                    def attachment = [:]
                    attachment.fallback = "See build log for more details"
                    attachment.title = "NAMEX-API failed LOCAL PYTEST! :bangbang:"
                    attachment.color = "danger" // red
                    attachment.text = "- check logs for more info" //+ "\nCommit ${GIT_COMMIT_SHORT_HASH} by ${GIT_COMMIT_AUTHOR}"
                    def logs = [:]
                    logs.type = "button"
                    logs.text = "Build Log"
                    logs.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-namex-api-pipeline/${BUILD_ID}/console"
                    logs.short = false
                    attachment.actions = [logs]
                    notifySlack("namex-api-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
                }

                //send msg to slack
                def attachment = [:]
                attachment.fallback = "See build log for more details"
                attachment.title = "NAMEX-API passed local pytest! :white_check_mark:"
                attachment.color = "#00FF00" // lime green
                notifySlack("namex-api-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])

            } // end stage - local pytest

        }//end stage

        stage('Build') {
            try {
                echo "Building..."
                openshiftBuild bldCfg: BUILDCFG_BASE, verbose: 'false', showBuildLogs: 'true'

                sleep 5

                // openshiftVerifyBuild bldCfg: BUILDCFG_NAME
                echo ">>> Get Image Hash"
                IMAGE_HASH = sh (
                    script: """oc get istag ${IMAGE_BASE_NAME}:latest -o template --template=\"{{.image.dockerImageReference}}\"|awk -F \":\" \'{print \$3}\'""",
                        returnStdout: true).trim()
                echo ">> IMAGE_HASH: ${IMAGE_HASH}"
                echo ">>>> Build Complete"

            } catch (Exception e) {
                echo "error during build: ${e}"
                // send msg to slack
                attachment = [:]
                attachment.fallback = "See build log for more details"
                attachment.title = "NAMEX-API failed to BUILD :fire:"
                attachment.color = "danger" // red
                def logs = [:]
                logs.type = "button"
                logs.text = "Build Log"
                logs.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-namex-api-pipeline/${BUILD_ID}/console"
                logs.short = false
                attachment.actions = [logs]
                notifySlack("namex-api-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
                error('Aborted')
            }
        }//end stage

        stage('Assemble Runtime') {
            try {
                echo "Building..."
                openshiftBuild bldCfg: BUILDCFG_RUNTIME, verbose: 'false', showBuildLogs: 'true'

                sleep 5

                // openshiftVerifyBuild bldCfg: BUILDCFG_NAME
                echo ">>> Get Image Hash"
                IMAGE_HASH = sh (
                    script: """oc get istag ${IMAGE_RUNTIME_NAME}:latest -o template --template=\"{{.image.dockerImageReference}}\"|awk -F \":\" \'{print \$3}\'""",
                        returnStdout: true).trim()
                echo ">> IMAGE_HASH: ${IMAGE_HASH}"
                echo ">>>> Build Complete"

            } catch (Exception e) {
                echo "error during assemble runtime: ${e}"
                // send msg to slack
                attachment = [:]
                attachment.fallback = "See build log for more details"
                attachment.title = "NAMEX-API failed to ASSEMBLE RUNTIME :fire:"
                attachment.color = "danger" // red
                def logs = [:]
                logs.type = "button"
                logs.text = "Build Log"
                logs.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-namex-api-pipeline/${BUILD_ID}/console"
                logs.short = false
                attachment.actions = [logs]
                notifySlack("namex-api-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
                error('Aborted')
            }

            // send msg to slack
            attachment = [:]
            attachment.fallback = "See build log for more details"
            attachment.title = "NAMEX-API Build ${BUILD_ID} OK! :heart: :tada:"
            attachment.color = "#00FF00" // Lime Green
            attachment.text = "Changes applied:\n" + triggerBuild(CONTEXT_DIRECTORY) //+ "\nCommit ${GIT_COMMIT_SHORT_HASH} by ${GIT_COMMIT_AUTHOR}"
            def details = [:]
            details.type = "button"
            details.text = "Details"
            details.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-namex-api-pipeline/${BUILD_ID}"
            details.short = false
            attachment.actions = [details]
            notifySlack("namex-api-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
        }//end stage

        stage('Deploy DEV') {
            try {
                echo ">>> Tag ${IMAGE_HASH} with ${DEV_TAG_NAME}"
                openshiftTag destStream: IMAGE_RUNTIME_NAME, verbose: 'false', destTag: DEV_TAG_NAME, srcStream: IMAGE_RUNTIME_NAME, srcTag: "${IMAGE_HASH}"

                sleep 10

                openshiftVerifyDeployment depCfg: DEV_DEPLOYMENT_NAME, namespace: DEV_NS, replicaCount: 1, verbose: 'false', verifyReplicaCount: 'false'
                echo ">>>> Deployment Complete"

            } catch (Exception e) {
                echo "error during dev deploy: ${e}"
                // send msg to slack
                attachment = [:]
                attachment.fallback = "See build log for more details"
                attachment.title = "NAMEX-API failed to DEPLOY to DEV :fire:"
                attachment.color = "danger" // red
                def logs = [:]
                logs.type = "button"
                logs.text = "Build Log"
                logs.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-namex-api-pipeline/${BUILD_ID}/console"
                logs.short = false
                attachment.actions = [logs]
                notifySlack("namex-api-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
                error('Aborted')
            }

            // send msg to slack
            attachment = [:]
            attachment.fallback = "See build log for more details"
            attachment.title = "NAMEX-API successfully deployed to DEV :rocket:"
            attachment.color = "#00FF00" // Lime Green
            notifySlack("namex-api-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
        }//end stage
    }//end node
    }

    // Part 2 - Integration Testing API

    //node/pod needs environment setup for testing
    def py3nodejs_label = "jenkins-py3nodejs-${UUID.randomUUID().toString()}"
    podTemplate(label: py3nodejs_label, name: py3nodejs_label, serviceAccount: 'jenkins', cloud: 'openshift', containers: [
        containerTemplate(
            name: 'jnlp',
            image: '172.50.0.2:5000/openshift/jenkins-slave-py3nodejs',
            resourceRequestCpu: '500m',
            resourceLimitCpu: '1000m',
            resourceRequestMemory: '1Gi',
            resourceLimitMemory: '2Gi',
            workingDir: '/tmp',
            command: '',
            args: '${computer.jnlpmac} ${computer.name}',
            envVars: [
                envVar(key:'BASEURL', value: "https://namex-dev.pathfinder.gov.bc.ca"),
                secretEnvVar(key: 'DEV_API_TEST_USER', secretName: 'apitest-secrets-dev', secretKey: 'username'),
                secretEnvVar(key: 'DEV_API_TEST_PASSWORD', secretName: 'apitest-secrets-dev', secretKey: 'password'),
                secretEnvVar(key: 'DEV_API_TEST_AUTH_SERVER', secretName: 'apitest-secrets-dev', secretKey: 'authurl'),
                secretEnvVar(key: 'DEV_API_TEST_CLIENT_ID', secretName: 'apitest-secrets-dev', secretKey: 'clientid'),
                secretEnvVar(key: 'DEV_API_TEST_CLIENT_SECRET', secretName: 'apitest-secrets-dev', secretKey: 'client_secret'),
                secretEnvVar(key: 'DEV_API_TEST_NR', secretName: 'apitest-secrets-dev', secretKey: 'test_nr')
            ]
        )
    ])
    {
        node(py3nodejs_label) {
            SLACK_TOKEN = sh (
                script: """oc get secret/slack -o template --template="{{.data.token}}" | base64 --decode""",
                    returnStdout: true).trim()

            stage('API Test DEV') {

                //the checkout is mandatory, otherwise functional test would fail
                echo "checking out source"
                echo "Build: ${BUILD_ID}"
                sh '''#!/bin/bash
                echo BASEURL=$BASEURL
                echo DEV_API_TEST_USER = $DEV_API_TEST_USER
                echo DEV_API_TEST_CLIENT_ID = $DEV_API_TEST_CLIENT_ID
                echo DEV_API_TEST_AUTH_SERVER = $DEV_API_TEST_AUTH_SERVER
                echo DEV_API_TEST_NR = $DEV_API_TEST_NR
                '''
                checkout scm
                dir('api') {
                    try {
                        sh '''
                            pip install pip --upgrade
                            rm -r .eggs
                            pip install setuptools==28.8.0
                            pip install -r requirements/dev.txt
                            python setup.py test
                        '''

                        //send msg to slack
                        def attachment = [:]
                        attachment.fallback = "See build log for more details"
                        attachment.title = "NAMEX-API pytests PASSED (maybe)! :white_check_mark:"
                        attachment.color = "#00FF00" // lime green
                        notifySlack("namex-api-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])

                    } catch (Exception e) {
                        echo "EXCEPTION: ${e}"

                        //send msg to slack
                        def attachment = [:]
                        attachment.fallback = "See build log for more details"
                        attachment.title = "NAMEX-API failed PYTESTS! :bangbang:"
                        attachment.color = "danger" // red
                        attachment.text = "- check logs for more info" //+ "\nCommit ${GIT_COMMIT_SHORT_HASH} by ${GIT_COMMIT_AUTHOR}"
                        def logs = [:]
                        logs.type = "button"
                        logs.text = "Build Log"
                        logs.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-namex-api-pipeline/${BUILD_ID}/console"
                        logs.short = false
                        attachment.actions = [logs]
                        notifySlack("namex-api-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
                    }
                }
                dir('api/tests/postman') {

                    sh 'npm install newman'

                    try {
                        sh './node_modules/newman/bin/newman.js run ./namex-pipeline-dev.postman_collection.json --global-var NR=$DEV_API_TEST_NR --global-var userid=$DEV_API_TEST_USER --global-var password=$DEV_API_TEST_PASSWORD --global-var url="${BASEURL}" --global-var authurl=$DEV_API_TEST_AUTH_SERVER --global-var clientid=$DEV_API_TEST_CLIENT_ID --global-var client_secret=$DEV_API_TEST_CLIENT_SECRET --global-var realm=sbc -r cli,junit,html'

                        //send msg to slack
                        def attachment = [:]
                        attachment.fallback = "See build log for more details"
                        attachment.title = "NAMEX-API-DEV passed NEWMAN tests! :white_check_mark:"
                        attachment.color = "#00FF00" // lime green
                        notifySlack("namex-api-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])

                    } catch (Exception e) {
                        //send msg to slack
                        def attachment = [:]
                        attachment.fallback = "See build log for more details"
                        attachment.title = "NAMEX-API-DEV failed NEWMAN tests! :x:"
                        attachment.color = "danger" // red
                        attachment.text = "- click _Results_ for more info" //+ "\nCommit ${GIT_COMMIT_SHORT_HASH} by ${GIT_COMMIT_AUTHOR}"
                        def results = [:]
                        results.type = "button"
                        results.text = "Results"
                        results.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-namex-api-pipeline/${BUILD_ID}/testReport/"
                        results.short = false
                        attachment.actions = [results]
                        notifySlack("namex-api-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
                    }
                    junit 'newman/*.xml'
                    publishHTML (target: [
                        allowMissing: false,
                        alwaysLinkToLastBuild: false,
                        keepAll: true,
                        reportDir: 'newman',
                        reportFiles: 'newman*.html',
                        reportName: "API Test Report"
                    ])
                    stash includes: 'newman/*.xml', name: 'namex-api-postman-tests'
                } // end dir
            } //end stage
        } //end node
    } //end podTemplate

    // Part 3 - Security scan of deployed app in dev

    //node/pod needs environment setup for zap scan
    def zappodlabel1 = "myapp-zap-${UUID.randomUUID().toString()}"
    podTemplate(label: zappodlabel1, name: zappodlabel1, serviceAccount: 'jenkins', cloud: 'openshift', containers: [
            containerTemplate(
            name: 'jnlp',
            image: '172.50.0.2:5000/openshift/jenkins-slave-zap',
            resourceRequestCpu: '500m',
            resourceLimitCpu: '1000m',
            resourceRequestMemory: '3Gi',
            resourceLimitMemory: '4Gi',
            workingDir: '/home/jenkins',
            command: '',
            args: '${computer.jnlpmac} ${computer.name}'
        )
    ])
    {
        node(zappodlabel1) {
            SLACK_TOKEN = sh (
                script: """oc get secret/slack -o template --template="{{.data.token}}" | base64 --decode""",
                    returnStdout: true).trim()

            stage('ZAP Security Scan DEV') {

                sleep 60

                try {
                    def retVal = sh returnStatus: true, script: '/zap/zap-baseline.py -r baseline.html -t http://namex-api-dev.pathfinder.gov.bc.ca/'
                    // publishHTML([allowMissing: false`, alwaysLinkToLastBuild: false, keepAll: true, reportDir: '/zap/wrk', reportFiles: 'baseline.html', reportName: 'ZAP Baseline Scan', reportTitles: 'ZAP Baseline Scan'])
                    echo "Return value is: ${retVal}"

                } catch (Exception e) {
                    echo "error during dev zap scan: ${e}"
                    // send msg to slack
                    def attachment = [:]
                    attachment.fallback = "See build log for more details"
                    attachment.title = "NAMEX-API-DEV failed ZAP-SCAN :x:"
                    attachment.color = "danger" // red
                    def logs = [:]
                    logs.type = "button"
                    logs.text = "Build Log"
                    logs.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-namex-api-pipeline/${BUILD_ID}/console"
                    logs.short = false
                    attachment.actions = [logs]
                    notifySlack("namex-api-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
                }
                def attachment = [:]
                attachment.fallback = "See build log for more details"
                attachment.title = "NAMEX-API-DEV passed ZAP-SCAN :white_check_mark:"
                attachment.color = "#00FF00" // Lime Green
                notifySlack("namex-api-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
            }
        }
    }

    // Part 4 - deploy to test

    stage('Deploy TEST') {
        node {
            SLACK_TOKEN = sh (
                script: """oc get secret/slack -o template --template="{{.data.token}}" | base64 --decode""",
                    returnStdout: true).trim()

            //send msg to slack
            def attachment = [:]
            attachment.title = "NAMEX-API ready for DEPLOY to TEST"
            attachment.color = "#ffff00" // yellow
            def decision = [:]
            decision.type = "button"
            decision.text = "Proceed/Abort?"
            decision.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-namex-api-pipeline/${BUILD_ID}/input"
            decision.short = false
            attachment.actions = [decision]
            notifySlack("namex-api-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
        }

        def abort = false;
        try {
            timeout(time: 1, unit: 'DAYS') {
                input message: "Deploy to test?", submitter: 'admin,ljtrent-admin,thorwolpert-admin,rarmitag-admin,kialj876-edit,katiemcgoff-edit'
            }
        } catch (Exception e) {
            abort = true;
        }
        node {
            SLACK_TOKEN = sh (
                    script: """oc get secret/slack -o template --template="{{.data.token}}" | base64 --decode""",
                        returnStdout: true).trim()
            if (abort) {
                //send msg to slack
                def attachment = [:]
                attachment.fallback = "See build log for more details"
                attachment.title = "NAMEX-API-TEST ABORTED :boom:"
                attachment.color = "danger" // red
                notifySlack("namex-api-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])

                echo ">>>> Deployment Aborted"
                error('Aborted')
            } else {
                try {
                    echo ">>> Tag ${TST_TAG_NAME} with ${TST_BCK_TAG_NAME}"
                    openshiftTag destStream: IMAGE_RUNTIME_NAME, verbose: 'false', destTag: TST_BCK_TAG_NAME, srcStream: IMAGE_RUNTIME_NAME, srcTag: TST_TAG_NAME
                    echo ">>> Tag ${IMAGE_HASH} with ${TST_TAG_NAME}"
                    openshiftTag destStream: IMAGE_RUNTIME_NAME, verbose: 'false', destTag: TST_TAG_NAME, srcStream: IMAGE_RUNTIME_NAME, srcTag: "${IMAGE_HASH}"

                    sleep 5

                    openshiftVerifyDeployment depCfg: TST_DEPLOYMENT_NAME, namespace: TST_NS, replicaCount: 1, verbose: 'false', verifyReplicaCount: 'false'
                    echo ">>>> Deployment Complete"

                } catch (Exception e) {
                    echo "error during test deploy: ${e}"
                    // send msg to slack
                    attachment = [:]
                    attachment.fallback = "See build log for more details"
                    attachment.title = "NAMEX-API failed to DEPLOY to TEST :fire:"
                    attachment.color = "danger" // red
                    def logs = [:]
                    logs.type = "button"
                    logs.text = "Build Log"
                    logs.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-namex-api-pipeline/${BUILD_ID}/console"
                    logs.short = false
                    attachment.actions = [logs]
                    notifySlack("namex-api-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
                    error('Aborted')
                }

                //send msg to slack
                def attachment = [:]
                attachment.fallback = "See build log for more details"
                attachment.title = "NAMEX-API successfully depoyed to TEST :rocket::rocket:"
                attachment.color = "#00FF00" // Lime Green
                notifySlack("namex-api-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
            }
        }
    }

    //Part 5 - Integration Testing API on test

    //node/pod needs environment setup for testing
    py3nodejs_label = "jenkins-py3nodejs-${UUID.randomUUID().toString()}"
    podTemplate(label: py3nodejs_label, name: py3nodejs_label, serviceAccount: 'jenkins', cloud: 'openshift', containers: [
        containerTemplate(
            name: 'jnlp',
            image: '172.50.0.2:5000/openshift/jenkins-slave-py3nodejs',
            resourceRequestCpu: '500m',
            resourceLimitCpu: '1000m',
            resourceRequestMemory: '1Gi',
            resourceLimitMemory: '2Gi',
            workingDir: '/tmp',
            command: '',
            args: '${computer.jnlpmac} ${computer.name}',
            envVars: [
                envVar(key:'BASEURL', value: "https://namex-test.pathfinder.gov.bc.ca"),
                secretEnvVar(key: 'TEST_API_TEST_USER', secretName: 'apitest-secrets-test', secretKey: 'username'),
                secretEnvVar(key: 'TEST_API_TEST_PASSWORD', secretName: 'apitest-secrets-test', secretKey: 'password'),
                secretEnvVar(key: 'TEST_API_TEST_AUTH_SERVER', secretName: 'apitest-secrets-test', secretKey: 'authurl'),
                secretEnvVar(key: 'TEST_API_TEST_CLIENT_ID', secretName: 'apitest-secrets-test', secretKey: 'clientid'),
                secretEnvVar(key: 'TEST_API_TEST_CLIENT_SECRET', secretName: 'apitest-secrets-test', secretKey: 'client_secret'),
                secretEnvVar(key: 'TEST_API_TEST_NR', secretName: 'apitest-secrets-test', secretKey: 'test_nr')
            ]
        )
    ])
    {
        node(py3nodejs_label) {
            SLACK_TOKEN = sh (
                    script: """oc get secret/slack -o template --template="{{.data.token}}" | base64 --decode""",
                        returnStdout: true).trim()

            stage('API Test TEST') {
                sh '''
                    #!/bin/bash
                    echo BASEURL=$BASEURL
                    echo TEST_API_TEST_USER = $TEST_API_TEST_USER
                    echo TEST_API_TEST_AUTH_SERVER = $TEST_API_TEST_AUTH_SERVER
                    echo TEST_API_TEST_CLIENT_ID = $TEST_API_TEST_CLIENT_ID
                '''
                //input(message: "Verify Environment variables. Continue?")

                echo "checking out source"
                echo "Build: ${BUILD_ID}"
                //the checkout is mandatory, otherwise functional test would fail
                checkout scm

                dir('api/tests/postman') {

                    sh 'npm install newman'

                    try {
                        sh './node_modules/newman/bin/newman.js run ./namex-pipeline-test.postman_collection.json --global-var userid=$TEST_API_TEST_USER --global-var password=$TEST_API_TEST_PASSWORD --global-var url="${BASEURL}" --global-var authurl=$TEST_API_TEST_AUTH_SERVER --global-var clientid=$TEST_API_TEST_CLIENT_ID --global-var client_secret=$TEST_API_TEST_CLIENT_SECRET --global-var realm=sbc --global-var NR=$TEST_API_TEST_NR -r cli,junit,html'

                        //send msg to slack
                        def attachment = [:]
                        attachment.fallback = "See build log for more details"
                        attachment.title = "NAMEX-API-TEST newman tests PASSED! :white_check_mark: :white_check_mark:"
                        attachment.color = "#00FF00" // lime green
                        notifySlack("namex-api-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])

                    } catch (Exception e) {
                        //send msg to slack
                        def attachment = [:]
                        attachment.fallback = "See build log for more details"
                        attachment.title = "NAMEX-API-TEST newman tests FAILED! :x: :x:"
                        attachment.color = "danger" // red
                        attachment.text = "- click _Results_ for more info" //+ "\nCommit ${GIT_COMMIT_SHORT_HASH} by ${GIT_COMMIT_AUTHOR}"
                        def results = [:]
                        results.type = "button"
                        results.text = "Results"
                        results.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-namex-api-pipeline/${BUILD_ID}/testReport/"
                        attachment.actions = [results]
                        notifySlack("namex-api-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])

                    }
                    junit 'newman/*.xml'
                    publishHTML (target: [
                        allowMissing: false,
                        alwaysLinkToLastBuild: false,
                        keepAll: true,
                        reportDir: 'newman',
                        reportFiles: 'newman*.html',
                        reportName: "API Test Report"
                    ])
                    stash includes: 'newman/*.xml', name: 'api-tests'
                } // end dir
            } //end stage
        } //end node
    } //end podTemplate

    // Part 6 - Security scan of deployed app in test

    //node/pod needs environment setup for zap scan
    def zappodlabel2 = "myapp-zap-${UUID.randomUUID().toString()}"
    podTemplate(label: zappodlabel2, name: zappodlabel2, serviceAccount: 'jenkins', cloud: 'openshift', containers: [
        containerTemplate(
            name: 'jnlp',
            image: '172.50.0.2:5000/openshift/jenkins-slave-zap',
            resourceRequestCpu: '500m',
            resourceLimitCpu: '1000m',
            resourceRequestMemory: '3Gi',
            resourceLimitMemory: '4Gi',
            workingDir: '/home/jenkins',
            command: '',
            args: '${computer.jnlpmac} ${computer.name}'
        )
    ])
    {
        node(zappodlabel2) {
            stage('ZAP Security Scan') {

                sleep 60

                try {
                    def retVal = sh returnStatus: true, script: '/zap/zap-baseline.py -r baseline.html -t http://namex-api-test.pathfinder.gov.bc.ca/'
                    // publishHTML([allowMissing: false`, alwaysLinkToLastBuild: false, keepAll: true, reportDir: '/zap/wrk', reportFiles: 'baseline.html', reportName: 'ZAP Baseline Scan', reportTitles: 'ZAP Baseline Scan'])
                    echo "Return value is: ${retVal}"

                } catch (Exception e) {
                    echo "error during test zap scan: ${e}"
                    // send msg to slack
                    attachment = [:]
                    attachment.fallback = "See build log for more details"
                    attachment.title = "NAMEX-API-TEST failed ZAP-SCAN :x: :x:"
                    attachment.color = "danger" // red
                    def logs = [:]
                    logs.type = "button"
                    logs.text = "Build Log"
                    logs.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-namex-api-pipeline/${BUILD_ID}/console"
                    logs.short = false
                    attachment.actions = [logs]
                    notifySlack("namex-api-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
                }
                // send msg to slack
                def attachment = [:]
                attachment.fallback = "See build log for more details"
                attachment.title = "NAMEX-API passed TEST ZAP SCAN :white_check_mark: :white_check_mark:"
                attachment.color = "#00FF00" // Lime Green
                notifySlack("namex-api-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
            }//end stage
        }//end node
    }//end pod template

    // Part 7 - deploy to prod

    stage('Deploy PROD') {
        node {
            SLACK_TOKEN = sh (
                    script: """oc get secret/slack -o template --template="{{.data.token}}" | base64 --decode""",
                        returnStdout: true).trim()

            //send msg to slack
            def attachment = [:]
            attachment.title = "NAMEX-API ready for DEPLOY to PROD"
            attachment.color = "#ffff00" // yellow
            def decision = [:]
            decision.type = "button"
            decision.text = "Proceed/Abort?"
            decision.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-namex-api-pipeline/${BUILD_ID}/input"
            decision.short = false
            attachment.actions = [decision]
            notifySlack("namex-api-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
        }

        def abort = false;
        try {
            timeout(time: 1, unit: 'DAYS') {
                input message: "Deploy to prod?", submitter: 'admin,ljtrent-admin,thorwolpert-admin,rarmitag-admin,kialj876-edit,katiemcgoff-edit'
            }
        } catch (Exception e) {
            abort = true;
        }
        node {
            SLACK_TOKEN = sh (
                    script: """oc get secret/slack -o template --template="{{.data.token}}" | base64 --decode""",
                        returnStdout: true).trim()

            if (abort) {
                //send msg to slack
                def attachment = [:]
                attachment.fallback = "See build log for more details"
                attachment.title = "NAMEX-API-PROD ABORTED :boom::boom:"
                attachment.color = "danger" // red
                notifySlack("namex-api-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])

                echo ">>>> Deployment Aborted"
                error('Aborted')
            } else {
                try {
                    echo ">>> Tag ${TST_TAG_NAME} with ${PROD_BCK_TAG_NAME}"
                    openshiftTag destStream: IMAGE_RUNTIME_NAME, verbose: 'false', destTag: PROD_BCK_TAG_NAME, srcStream: IMAGE_RUNTIME_NAME, srcTag: PROD_TAG_NAME
                    echo ">>> Tag ${IMAGE_HASH} with ${PROD_TAG_NAME}"
                    openshiftTag destStream: IMAGE_RUNTIME_NAME, verbose: 'false', destTag: PROD_TAG_NAME, srcStream: IMAGE_RUNTIME_NAME, srcTag: "${IMAGE_HASH}"

                    sleep 5

                    openshiftVerifyDeployment depCfg: PROD_DEPLOYMENT_NAME, namespace: PROD_NS, replicaCount: 1, verbose: 'false', verifyReplicaCount: 'false'
                    echo ">>>> Deployment Complete"

                } catch (Exception e) {
                    //send msg to slack
                    def attachment = [:]
                    attachment.fallback = "See build log for more details"
                    attachment.title = "NAMEX-API failed deploying to PROD :boom::boom::boom:"
                    attachment.color = "danger" // red
                    def logs = [:]
                    logs.type = "button"
                    logs.text = "Build Log"
                    logs.url = "https://jenkins-servicebc-ne-tools.pathfinder.gov.bc.ca/job/servicebc-ne-tools/job/servicebc-ne-tools-namex-api-pipeline/${BUILD_ID}/console"
                    logs.short = false
                    attachment.actions = [logs]
                    notifySlack("namex-api-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
                    error('Failure')
                }

                //send msg to slack
                def attachment = [:]
                attachment.fallback = "See build log for more details"
                attachment.title = "NAMEX-API successfully deployed to PROD :tada::rocket::tada:"
                attachment.color = "#00FF00" // Lime Green
                notifySlack("namex-api-${BUILD_ID}", "#name-examination", "https://hooks.slack.com/services/${SLACK_TOKEN}", [attachment])
                currentBuild.result='SUCCESS'
            }
        }
    }
}
